"""empty message

Revision ID: e2f8cd800db7
Revises:
Create Date: 2025-01-24 10:48:35.351494

"""

from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

import app.db.model
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "e2f8cd800db7"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "annotation_body",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("legacy_id", app.db.model.StringListType(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation_body")),
    )
    op.create_index(op.f("ix_annotation_body_id"), "annotation_body", ["id"], unique=False)
    op.create_index(
        op.f("ix_annotation_body_legacy_id"),
        "annotation_body",
        ["legacy_id"],
        unique=False,
    )
    op.create_table(
        "brain_location",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("x", sa.Float(), nullable=True),
        sa.Column("y", sa.Float(), nullable=True),
        sa.Column("z", sa.Float(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_brain_location")),
    )
    op.create_index(op.f("ix_brain_location_id"), "brain_location", ["id"], unique=False)
    op.create_table(
        "brain_region",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("ontology_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_brain_region")),
    )
    op.create_index(op.f("ix_brain_region_id"), "brain_region", ["id"], unique=False)
    op.create_index(op.f("ix_brain_region_name"), "brain_region", ["name"], unique=True)
    op.create_index(
        op.f("ix_brain_region_ontology_id"),
        "brain_region",
        ["ontology_id"],
        unique=True,
    )
    op.create_table(
        "license",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("legacy_id", app.db.model.StringListType(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_license")),
    )
    op.create_index(op.f("ix_license_id"), "license", ["id"], unique=False)
    op.create_index(op.f("ix_license_legacy_id"), "license", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_license_name"), "license", ["name"], unique=True)
    op.create_table(
        "role",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.Column("legacy_id", app.db.model.StringListType(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_role")),
    )
    op.create_index(op.f("ix_role_id"), "role", ["id"], unique=False)
    op.create_index(op.f("ix_role_legacy_id"), "role", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_role_name"), "role", ["name"], unique=True)
    op.create_index(op.f("ix_role_role_id"), "role", ["role_id"], unique=True)
    op.create_table(
        "root",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("legacy_id", app.db.model.StringListType(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_root")),
    )
    op.create_index(op.f("ix_root_id"), "root", ["id"], unique=False)
    op.create_index(op.f("ix_root_legacy_id"), "root", ["legacy_id"], unique=False)
    op.create_table(
        "species",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("taxonomy_id", sa.String(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_species")),
    )
    op.create_index(op.f("ix_species_id"), "species", ["id"], unique=False)
    op.create_index(op.f("ix_species_name"), "species", ["name"], unique=True)
    op.create_index(op.f("ix_species_taxonomy_id"), "species", ["taxonomy_id"], unique=True)
    op.create_table(
        "subject",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subject")),
    )
    op.create_index(op.f("ix_subject_id"), "subject", ["id"], unique=False)
    op.create_index(op.f("ix_subject_name"), "subject", ["name"], unique=True)
    op.create_table(
        "agent",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["id"], ["root.id"], name=op.f("fk_agent_id_root")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_agent")),
        sa.UniqueConstraint("pref_label", name=op.f("uq_agent_pref_label")),
    )
    op.create_index(op.f("ix_agent_id"), "agent", ["id"], unique=False)
    op.create_table(
        "datamaturity_annotation_body",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["annotation_body.id"],
            name=op.f("fk_datamaturity_annotation_body_id_annotation_body"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_datamaturity_annotation_body")),
        sa.UniqueConstraint("pref_label", name=op.f("uq_datamaturity_annotation_body_pref_label")),
    )
    op.create_index(
        op.f("ix_datamaturity_annotation_body_id"),
        "datamaturity_annotation_body",
        ["id"],
        unique=False,
    )
    op.create_table(
        "etype_annotation_body",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=True),
        sa.Column("alt_label", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["annotation_body.id"],
            name=op.f("fk_etype_annotation_body_id_annotation_body"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_etype_annotation_body")),
        sa.UniqueConstraint("pref_label", name=op.f("uq_etype_annotation_body_pref_label")),
    )
    op.create_index(
        op.f("ix_etype_annotation_body_id"),
        "etype_annotation_body",
        ["id"],
        unique=False,
    )
    op.create_table(
        "mtype_annotation_body",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=True),
        sa.Column("alt_label", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["annotation_body.id"],
            name=op.f("fk_mtype_annotation_body_id_annotation_body"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mtype_annotation_body")),
        sa.UniqueConstraint("pref_label", name=op.f("uq_mtype_annotation_body_pref_label")),
    )
    op.create_index(
        op.f("ix_mtype_annotation_body_id"),
        "mtype_annotation_body",
        ["id"],
        unique=False,
    )
    op.create_table(
        "strain",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("taxonomy_id", sa.String(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_strain_species_id_species")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_strain")),
    )
    op.create_index(op.f("ix_strain_id"), "strain", ["id"], unique=False)
    op.create_index(op.f("ix_strain_name"), "strain", ["name"], unique=True)
    op.create_index(op.f("ix_strain_taxonomy_id"), "strain", ["taxonomy_id"], unique=True)
    op.create_table(
        "entity",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("createdBy_id", sa.Integer(), nullable=True),
        sa.Column("updatedBy_id", sa.Integer(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["createdBy_id"], ["agent.id"], name=op.f("fk_entity_createdBy_id_agent")
        ),
        sa.ForeignKeyConstraint(["id"], ["root.id"], name=op.f("fk_entity_id_root")),
        sa.ForeignKeyConstraint(
            ["updatedBy_id"], ["agent.id"], name=op.f("fk_entity_updatedBy_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_entity")),
    )
    op.create_table(
        "organization",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("alternative_name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["agent.id"], name=op.f("fk_organization_id_agent")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organization")),
    )
    op.create_table(
        "person",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("givenName", sa.String(), nullable=False),
        sa.Column("familyName", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["agent.id"], name=op.f("fk_person_id_agent")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_person")),
        sa.UniqueConstraint("givenName", "familyName", name="unique_person_name_1"),
    )
    op.create_table(
        "analysis_software_source_code",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("branch", sa.String(), nullable=False),
        sa.Column("codeRepository", sa.String(), nullable=False),
        sa.Column("command", sa.String(), nullable=False),
        sa.Column("commit", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("subdirectory", sa.String(), nullable=False),
        sa.Column("targetEntity", sa.String(), nullable=False),
        sa.Column("programmingLanguage", sa.String(), nullable=False),
        sa.Column("runtimePlatform", sa.String(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("content_url", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["entity.id"],
            name=op.f("fk_analysis_software_source_code_id_entity"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_analysis_software_source_code")),
    )
    op.create_index(
        op.f("ix_analysis_software_source_code_id"),
        "analysis_software_source_code",
        ["id"],
        unique=True,
    )
    op.create_table(
        "annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("note", sa.String(), nullable=True),
        sa.Column("entity_id", sa.Integer(), nullable=False),
        sa.Column("annotation_body_id", sa.Integer(), nullable=False),
        sa.Column("legacy_id", app.db.model.StringListType(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["annotation_body_id"],
            ["annotation_body.id"],
            name=op.f("fk_annotation_annotation_body_id_annotation_body"),
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_annotation_entity_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation")),
    )
    op.create_index(op.f("ix_annotation_id"), "annotation", ["id"], unique=False)
    op.create_index(op.f("ix_annotation_legacy_id"), "annotation", ["legacy_id"], unique=False)
    op.create_table(
        "contribution",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("agent_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("entity_id", sa.Integer(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"], ["agent.id"], name=op.f("fk_contribution_agent_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_contribution_entity_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.id"], name=op.f("fk_contribution_role_id_role")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_contribution")),
        sa.UniqueConstraint("entity_id", "role_id", "agent_id", name="unique_contribution_1"),
    )
    op.create_index(op.f("ix_contribution_id"), "contribution", ["id"], unique=False)
    op.create_table(
        "emodel",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("eModel", sa.String(), nullable=False),
        sa.Column("eType", sa.String(), nullable=False),
        sa.Column("iteration", sa.String(), nullable=False),
        sa.Column("score", sa.Float(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("content_url", sa.String(), nullable=True),
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("strain_id", sa.Integer(), nullable=True),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_emodel_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_emodel_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_emodel_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_emodel_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id"], ["strain.id"], name=op.f("fk_emodel_strain_id_strain")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_emodel")),
    )
    op.create_index(op.f("ix_emodel_id"), "emodel", ["id"], unique=True)
    op.create_table(
        "experimental_bouton_density",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("strain_id", sa.Integer(), nullable=True),
        sa.Column("license_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_experimental_bouton_density_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_bouton_density_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_experimental_bouton_density_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_experimental_bouton_density_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk_experimental_bouton_density_species_id_species"),
        ),
        sa.ForeignKeyConstraint(
            ["strain_id"],
            ["strain.id"],
            name=op.f("fk_experimental_bouton_density_strain_id_strain"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experimental_bouton_density")),
    )
    op.create_index(
        op.f("ix_experimental_bouton_density_name"),
        "experimental_bouton_density",
        ["name"],
        unique=False,
    )
    op.create_table(
        "experimental_neuron_density",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("strain_id", sa.Integer(), nullable=True),
        sa.Column("license_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_experimental_neuron_density_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_neuron_density_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_experimental_neuron_density_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_experimental_neuron_density_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk_experimental_neuron_density_species_id_species"),
        ),
        sa.ForeignKeyConstraint(
            ["strain_id"],
            ["strain.id"],
            name=op.f("fk_experimental_neuron_density_strain_id_strain"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experimental_neuron_density")),
    )
    op.create_index(
        op.f("ix_experimental_neuron_density_name"),
        "experimental_neuron_density",
        ["name"],
        unique=False,
    )
    op.create_table(
        "experimental_synapses_per_connection",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("strain_id", sa.Integer(), nullable=True),
        sa.Column("license_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_experimental_synapses_per_connection_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_synapses_per_connection_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["entity.id"],
            name=op.f("fk_experimental_synapses_per_connection_id_entity"),
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_experimental_synapses_per_connection_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk_experimental_synapses_per_connection_species_id_species"),
        ),
        sa.ForeignKeyConstraint(
            ["strain_id"],
            ["strain.id"],
            name=op.f("fk_experimental_synapses_per_connection_strain_id_strain"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experimental_synapses_per_connection")),
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_name"),
        "experimental_synapses_per_connection",
        ["name"],
        unique=False,
    )
    op.create_table(
        "memodel",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("validated", sa.Boolean(), nullable=False),
        sa.Column("content_url", sa.String(), nullable=True),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_memodel_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_memodel_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_memodel_id_entity")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_memodel")),
    )
    op.create_index(op.f("ix_memodel_id"), "memodel", ["id"], unique=True)
    op.create_table(
        "mesh",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.Column("content_url", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_mesh_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_mesh_id_entity")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mesh")),
    )
    op.create_index(op.f("ix_mesh_id"), "mesh", ["id"], unique=True)
    op.create_table(
        "reconstruction_morphology",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("morphology_description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("license_id", sa.Integer(), nullable=True),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("strain_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_reconstruction_morphology_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_reconstruction_morphology_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_reconstruction_morphology_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_reconstruction_morphology_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk_reconstruction_morphology_species_id_species"),
        ),
        sa.ForeignKeyConstraint(
            ["strain_id"],
            ["strain.id"],
            name=op.f("fk_reconstruction_morphology_strain_id_strain"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reconstruction_morphology")),
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_name"),
        "reconstruction_morphology",
        ["name"],
        unique=False,
    )
    op.create_table(
        "single_cell_experimental_trace",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.Column("species_id", sa.Integer(), nullable=False),
        sa.Column("strain_id", sa.Integer(), nullable=True),
        sa.Column("license_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_single_cell_experimental_trace_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_single_cell_experimental_trace_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"],
            ["entity.id"],
            name=op.f("fk_single_cell_experimental_trace_id_entity"),
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_single_cell_experimental_trace_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk_single_cell_experimental_trace_species_id_species"),
        ),
        sa.ForeignKeyConstraint(
            ["strain_id"],
            ["strain.id"],
            name=op.f("fk_single_cell_experimental_trace_strain_id_strain"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_single_cell_experimental_trace")),
    )
    op.create_index(
        op.f("ix_single_cell_experimental_trace_name"),
        "single_cell_experimental_trace",
        ["name"],
        unique=False,
    )
    op.create_table(
        "morphology_feature_annotation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("reconstruction_morphology_id", sa.Integer(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["reconstruction_morphology_id"],
            ["reconstruction_morphology.id"],
            name=op.f(
                "fk_morphology_feature_annotation_reconstruction_morphology_id_reconstruction_morphology"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_morphology_feature_annotation")),
        sa.UniqueConstraint(
            "reconstruction_morphology_id",
            name=op.f("uq_morphology_feature_annotation_reconstruction_morphology_id"),
        ),
    )
    op.create_index(
        op.f("ix_morphology_feature_annotation_id"),
        "morphology_feature_annotation",
        ["id"],
        unique=False,
    )
    op.create_table(
        "single_neuron_simulation",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("injectionLocation", app.db.model.StringListType(), nullable=False),
        sa.Column("recordingLocation", app.db.model.StringListType(), nullable=False),
        sa.Column("me_model_id", sa.Integer(), nullable=False),
        sa.Column("content_url", sa.String(), nullable=True),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_single_neuron_simulation_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_single_neuron_simulation_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_single_neuron_simulation_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["me_model_id"],
            ["memodel.id"],
            name=op.f("fk_single_neuron_simulation_me_model_id_memodel"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_single_neuron_simulation")),
    )
    op.create_index(
        op.f("ix_single_neuron_simulation_id"),
        "single_neuron_simulation",
        ["id"],
        unique=True,
    )
    op.create_table(
        "single_neuron_synaptome",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("me_model_id", sa.Integer(), nullable=False),
        sa.Column("content_url", sa.String(), nullable=True),
        sa.Column("brain_location_id", sa.Integer(), nullable=True),
        sa.Column("brain_region_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brain_location_id"],
            ["brain_location.id"],
            name=op.f("fk_single_neuron_synaptome_brain_location_id_brain_location"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_single_neuron_synaptome_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_single_neuron_synaptome_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["me_model_id"],
            ["memodel.id"],
            name=op.f("fk_single_neuron_synaptome_me_model_id_memodel"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_single_neuron_synaptome")),
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_id"),
        "single_neuron_synaptome",
        ["id"],
        unique=True,
    )
    op.create_table(
        "measurement",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("measurement_of", sa.String(), nullable=False),
        sa.Column("morphology_feature_annotation_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["morphology_feature_annotation_id"],
            ["morphology_feature_annotation.id"],
            name=op.f(
                "fk_measurement_morphology_feature_annotation_id_morphology_feature_annotation"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement")),
    )
    op.create_index(op.f("ix_measurement_id"), "measurement", ["id"], unique=False)
    op.create_index(
        op.f("ix_measurement_measurement_of"),
        "measurement",
        ["measurement_of"],
        unique=False,
    )
    op.create_table(
        "measurement_serie_element",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("value", sa.Float(), nullable=True),
        sa.Column("measurement_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["measurement_id"],
            ["measurement.id"],
            name=op.f("fk_measurement_serie_element_measurement_id_measurement"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_serie_element")),
    )
    op.create_index(
        op.f("ix_measurement_serie_element_id"),
        "measurement_serie_element",
        ["id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_measurement_serie_element_id"), table_name="measurement_serie_element")
    op.drop_table("measurement_serie_element")
    op.drop_index(op.f("ix_measurement_measurement_of"), table_name="measurement")
    op.drop_index(op.f("ix_measurement_id"), table_name="measurement")
    op.drop_table("measurement")
    op.drop_index(op.f("ix_single_neuron_synaptome_id"), table_name="single_neuron_synaptome")
    op.drop_table("single_neuron_synaptome")
    op.drop_index(op.f("ix_single_neuron_simulation_id"), table_name="single_neuron_simulation")
    op.drop_table("single_neuron_simulation")
    op.drop_index(
        op.f("ix_morphology_feature_annotation_id"),
        table_name="morphology_feature_annotation",
    )
    op.drop_table("morphology_feature_annotation")
    op.drop_index(
        op.f("ix_single_cell_experimental_trace_name"),
        table_name="single_cell_experimental_trace",
    )
    op.drop_table("single_cell_experimental_trace")
    op.drop_index(
        op.f("ix_reconstruction_morphology_name"),
        table_name="reconstruction_morphology",
    )
    op.drop_table("reconstruction_morphology")
    op.drop_index(op.f("ix_mesh_id"), table_name="mesh")
    op.drop_table("mesh")
    op.drop_index(op.f("ix_memodel_id"), table_name="memodel")
    op.drop_table("memodel")
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_name"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_table("experimental_synapses_per_connection")
    op.drop_index(
        op.f("ix_experimental_neuron_density_name"),
        table_name="experimental_neuron_density",
    )
    op.drop_table("experimental_neuron_density")
    op.drop_index(
        op.f("ix_experimental_bouton_density_name"),
        table_name="experimental_bouton_density",
    )
    op.drop_table("experimental_bouton_density")
    op.drop_index(op.f("ix_emodel_id"), table_name="emodel")
    op.drop_table("emodel")
    op.drop_index(op.f("ix_contribution_id"), table_name="contribution")
    op.drop_table("contribution")
    op.drop_index(op.f("ix_annotation_legacy_id"), table_name="annotation")
    op.drop_index(op.f("ix_annotation_id"), table_name="annotation")
    op.drop_table("annotation")
    op.drop_index(
        op.f("ix_analysis_software_source_code_id"),
        table_name="analysis_software_source_code",
    )
    op.drop_table("analysis_software_source_code")
    op.drop_table("person")
    op.drop_table("organization")
    op.drop_table("entity")
    op.drop_index(op.f("ix_strain_taxonomy_id"), table_name="strain")
    op.drop_index(op.f("ix_strain_name"), table_name="strain")
    op.drop_index(op.f("ix_strain_id"), table_name="strain")
    op.drop_table("strain")
    op.drop_index(op.f("ix_mtype_annotation_body_id"), table_name="mtype_annotation_body")
    op.drop_table("mtype_annotation_body")
    op.drop_index(op.f("ix_etype_annotation_body_id"), table_name="etype_annotation_body")
    op.drop_table("etype_annotation_body")
    op.drop_index(
        op.f("ix_datamaturity_annotation_body_id"),
        table_name="datamaturity_annotation_body",
    )
    op.drop_table("datamaturity_annotation_body")
    op.drop_index(op.f("ix_agent_id"), table_name="agent")
    op.drop_table("agent")
    op.drop_index(op.f("ix_subject_name"), table_name="subject")
    op.drop_index(op.f("ix_subject_id"), table_name="subject")
    op.drop_table("subject")
    op.drop_index(op.f("ix_species_taxonomy_id"), table_name="species")
    op.drop_index(op.f("ix_species_name"), table_name="species")
    op.drop_index(op.f("ix_species_id"), table_name="species")
    op.drop_table("species")
    op.drop_index(op.f("ix_root_legacy_id"), table_name="root")
    op.drop_index(op.f("ix_root_id"), table_name="root")
    op.drop_table("root")
    op.drop_index(op.f("ix_role_role_id"), table_name="role")
    op.drop_index(op.f("ix_role_name"), table_name="role")
    op.drop_index(op.f("ix_role_legacy_id"), table_name="role")
    op.drop_index(op.f("ix_role_id"), table_name="role")
    op.drop_table("role")
    op.drop_index(op.f("ix_license_name"), table_name="license")
    op.drop_index(op.f("ix_license_legacy_id"), table_name="license")
    op.drop_index(op.f("ix_license_id"), table_name="license")
    op.drop_table("license")
    op.drop_index(op.f("ix_brain_region_ontology_id"), table_name="brain_region")
    op.drop_index(op.f("ix_brain_region_name"), table_name="brain_region")
    op.drop_index(op.f("ix_brain_region_id"), table_name="brain_region")
    op.drop_table("brain_region")
    op.drop_index(op.f("ix_brain_location_id"), table_name="brain_location")
    op.drop_table("brain_location")
    op.drop_index(op.f("ix_annotation_body_legacy_id"), table_name="annotation_body")
    op.drop_index(op.f("ix_annotation_body_id"), table_name="annotation_body")
    op.drop_table("annotation_body")
    # ### end Alembic commands ###
