"""empty message

Revision ID: 30a01a4a62c9
Revises: 48378d76d7b0
Create Date: 2025-02-28 16:00:52.341789

"""

from collections.abc import Sequence

import sqlalchemy as sa

import app.db.types
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "30a01a4a62c9"
down_revision: str | None = "48378d76d7b0"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "mtype_class",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=False),
        sa.Column("alt_label", sa.String(), nullable=True),
        sa.Column("legacy_id", app.db.types.StringListType(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mtype_class")),
        sa.UniqueConstraint("pref_label", name=op.f("uq_mtype_class_pref_label")),
    )
    op.create_index(
        op.f("ix_mtype_class_creation_date"), "mtype_class", ["creation_date"], unique=False
    )
    op.create_index(op.f("ix_mtype_class_id"), "mtype_class", ["id"], unique=False)
    op.create_index(op.f("ix_mtype_class_legacy_id"), "mtype_class", ["legacy_id"], unique=False)
    op.create_table(
        "mtype_classification",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("createdBy_id", sa.Integer(), nullable=True),
        sa.Column("updatedBy_id", sa.Integer(), nullable=True),
        sa.Column("entity_id", sa.Integer(), nullable=False),
        sa.Column("mtype_class_id", sa.Integer(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["createdBy_id"], ["agent.id"], name=op.f("fk_mtype_classification_createdBy_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_mtype_classification_entity_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["mtype_class_id"],
            ["mtype_class.id"],
            name=op.f("fk_mtype_classification_mtype_class_id_mtype_class"),
        ),
        sa.ForeignKeyConstraint(
            ["updatedBy_id"], ["agent.id"], name=op.f("fk_mtype_classification_updatedBy_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mtype_classification")),
    )
    op.create_index(
        op.f("ix_mtype_classification_createdBy_id"),
        "mtype_classification",
        ["createdBy_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_creation_date"),
        "mtype_classification",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_entity_id"),
        "mtype_classification",
        ["entity_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_id"), "mtype_classification", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_mtype_classification_mtype_class_id"),
        "mtype_classification",
        ["mtype_class_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_updatedBy_id"),
        "mtype_classification",
        ["updatedBy_id"],
        unique=False,
    )
    op.drop_index("ix_mtype_annotation_body_id", table_name="mtype_annotation_body")
    op.drop_table("mtype_annotation_body")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "mtype_annotation_body",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("pref_label", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("definition", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("alt_label", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["annotation_body.id"], name="fk_mtype_annotation_body_id_annotation_body"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_mtype_annotation_body"),
        sa.UniqueConstraint("pref_label", name="uq_mtype_annotation_body_pref_label"),
    )
    op.create_index("ix_mtype_annotation_body_id", "mtype_annotation_body", ["id"], unique=False)
    op.drop_index(op.f("ix_mtype_classification_updatedBy_id"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_mtype_class_id"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_id"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_entity_id"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_creation_date"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_createdBy_id"), table_name="mtype_classification")
    op.drop_table("mtype_classification")
    op.drop_index(op.f("ix_mtype_class_legacy_id"), table_name="mtype_class")
    op.drop_index(op.f("ix_mtype_class_id"), table_name="mtype_class")
    op.drop_index(op.f("ix_mtype_class_creation_date"), table_name="mtype_class")
    op.drop_table("mtype_class")
    # ### end Alembic commands ###
