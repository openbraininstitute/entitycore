"""emodel

Revision ID: eab1b6ab7baf
Revises: 652f1f3ffb80
Create Date: 2025-03-21 10:35:36.448734

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "eab1b6ab7baf"
down_revision: str | None = "652f1f3ffb80"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("started", "failure", "success", name="singleneuronsimulationstatus").create(
        op.get_bind()
    )
    op.create_table(
        "etype_class",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=False),
        sa.Column("alt_label", sa.String(), nullable=True),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_etype_class")),
    )
    op.create_index(
        op.f("ix_etype_class_creation_date"), "etype_class", ["creation_date"], unique=False
    )
    op.create_index(op.f("ix_etype_class_legacy_id"), "etype_class", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_etype_class_pref_label"), "etype_class", ["pref_label"], unique=True)
    op.create_table(
        "etype_classification",
        sa.Column("etype_class_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("createdBy_id", sa.Uuid(), nullable=True),
        sa.Column("updatedBy_id", sa.Uuid(), nullable=True),
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["createdBy_id"], ["agent.id"], name=op.f("fk_etype_classification_createdBy_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_etype_classification_entity_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["etype_class_id"],
            ["etype_class.id"],
            name=op.f("fk_etype_classification_etype_class_id_etype_class"),
        ),
        sa.ForeignKeyConstraint(
            ["updatedBy_id"], ["agent.id"], name=op.f("fk_etype_classification_updatedBy_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_etype_classification")),
    )
    op.create_index(
        op.f("ix_etype_classification_createdBy_id"),
        "etype_classification",
        ["createdBy_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_creation_date"),
        "etype_classification",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_entity_id"),
        "etype_classification",
        ["entity_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_etype_class_id"),
        "etype_classification",
        ["etype_class_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_updatedBy_id"),
        "etype_classification",
        ["updatedBy_id"],
        unique=False,
    )
    op.drop_index("ix_etype_annotation_body_pref_label", table_name="etype_annotation_body")
    op.drop_table("etype_annotation_body")
    op.add_column("emodel", sa.Column("exemplar_morphology_id", sa.Uuid(), nullable=False))
    op.add_column("emodel", sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True))
    op.create_index(
        "ix_emodel_description_vector",
        "emodel",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_foreign_key(
        op.f("fk_emodel_exemplar_morphology_id_reconstruction_morphology"),
        "emodel",
        "reconstruction_morphology",
        ["exemplar_morphology_id"],
        ["id"],
    )
    op.add_column(
        "reconstruction_morphology",
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
    )
    op.create_index(
        "ix_reconstruction_morphology_description_vector",
        "reconstruction_morphology",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.drop_column("reconstruction_morphology", "morphology_description_vector")
    op.alter_column(
        "single_neuron_simulation",
        "status",
        existing_type=sa.VARCHAR(),
        type_=sa.Enum("started", "failure", "success", name="singleneuronsimulationstatus"),
        existing_nullable=False,
        postgresql_using="status::singleneuronsimulationstatus",
    )
    public_reconstruction_morphology_morphology_description_vector = PGTrigger(
        schema="public",
        signature="morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.replace_entity(public_reconstruction_morphology_morphology_description_vector)

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_emodel_emodel_description_vector)

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'authorized_project_id mismatch or entity is not public';\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'authorized_project_id mismatch or entity is not public';\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_emodel_emodel_description_vector)

    public_reconstruction_morphology_morphology_description_vector = PGTrigger(
        schema="public",
        signature="morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.reconstruction_morphology FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('morphology_description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.replace_entity(public_reconstruction_morphology_morphology_description_vector)
    op.alter_column(
        "single_neuron_simulation",
        "status",
        existing_type=sa.Enum("started", "failure", "success", name="singleneuronsimulationstatus"),
        type_=sa.VARCHAR(),
        existing_nullable=False,
    )
    op.add_column(
        "reconstruction_morphology",
        sa.Column(
            "morphology_description_vector",
            postgresql.TSVECTOR(),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(
        "ix_reconstruction_morphology_description_vector",
        table_name="reconstruction_morphology",
        postgresql_using="gin",
    )
    op.drop_column("reconstruction_morphology", "description_vector")
    op.drop_constraint(
        op.f("fk_emodel_exemplar_morphology_id_reconstruction_morphology"),
        "emodel",
        type_="foreignkey",
    )
    op.drop_index("ix_emodel_description_vector", table_name="emodel", postgresql_using="gin")
    op.drop_column("emodel", "description_vector")
    op.drop_column("emodel", "exemplar_morphology_id")
    op.create_table(
        "etype_annotation_body",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("pref_label", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("definition", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("alt_label", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["annotation_body.id"], name="fk_etype_annotation_body_id_annotation_body"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_etype_annotation_body"),
    )
    op.create_index(
        "ix_etype_annotation_body_pref_label", "etype_annotation_body", ["pref_label"], unique=True
    )
    op.drop_index(op.f("ix_etype_classification_updatedBy_id"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_etype_class_id"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_entity_id"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_creation_date"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_createdBy_id"), table_name="etype_classification")
    op.drop_table("etype_classification")
    op.drop_index(op.f("ix_etype_class_pref_label"), table_name="etype_class")
    op.drop_index(op.f("ix_etype_class_legacy_id"), table_name="etype_class")
    op.drop_index(op.f("ix_etype_class_creation_date"), table_name="etype_class")
    op.drop_table("etype_class")
    sa.Enum("started", "failure", "success", name="singleneuronsimulationstatus").drop(
        op.get_bind()
    )
    # ### end Alembic commands ###
