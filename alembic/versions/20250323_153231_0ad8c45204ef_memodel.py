"""memodel

Revision ID: 0ad8c45204ef
Revises: 928c1b2f7cf8
Create Date: 2025-03-23 15:32:31.929038

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "0ad8c45204ef"
down_revision: str | None = "928c1b2f7cf8"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "created", "initialized", "running", "done", "error", name="me_model_validation_status"
    ).create(op.get_bind())
    op.add_column(
        "memodel",
        sa.Column(
            "validation_status",
            postgresql.ENUM(
                "created",
                "initialized",
                "running",
                "done",
                "error",
                name="me_model_validation_status",
                create_type=False,
            ),
            nullable=False,
        ),
    )
    op.add_column("memodel", sa.Column("mmodel_id", sa.Uuid(), nullable=False))
    op.add_column("memodel", sa.Column("emodel_id", sa.Uuid(), nullable=False))
    op.add_column("memodel", sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True))
    op.add_column("memodel", sa.Column("species_id", sa.Uuid(), nullable=False))
    op.add_column("memodel", sa.Column("strain_id", sa.Uuid(), nullable=True))
    op.create_index(
        "ix_memodel_description_vector",
        "memodel",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_memodel_species_id"), "memodel", ["species_id"], unique=False)
    op.create_index(op.f("ix_memodel_strain_id"), "memodel", ["strain_id"], unique=False)
    op.create_foreign_key(
        op.f("fk_memodel_species_id_species"), "memodel", "species", ["species_id"], ["id"]
    )
    op.create_foreign_key(
        op.f("fk_memodel_emodel_id_emodel"), "memodel", "emodel", ["emodel_id"], ["id"]
    )
    op.create_foreign_key(
        op.f("fk_memodel_mmodel_id_reconstruction_morphology"),
        "memodel",
        "reconstruction_morphology",
        ["mmodel_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_memodel_strain_id_species_id",
        "memodel",
        "strain",
        ["strain_id", "species_id"],
        ["id", "species_id"],
    )
    op.drop_column("memodel", "validated")
    op.drop_column("memodel", "status")
    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_memodel_memodel_description_vector)

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.replace_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.mmodel_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_memodel_unauthorized_private_reference_trigger_memodel_mmodel_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_mmodel_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_mmodel_id_reconstruction_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.create_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.drop_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    public_memodel_unauthorized_private_reference_trigger_memodel_mmodel_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_mmodel_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_mmodel_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.mmodel_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_memodel_mmodel_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_emodel_exemplar_morphol = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphol()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE OR e1.authorized_project_id = e2.authorized_project_id)\n                ) THEN\n                    RAISE EXCEPTION 'UNAUTHORIZED_PRIVATE_REFERENCE';\n                END IF;\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.replace_entity(public_unauthorized_private_reference_function_emodel_exemplar_morphol)
    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_memodel_memodel_description_vector)

    op.add_column("memodel", sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column(
        "memodel", sa.Column("validated", sa.BOOLEAN(), autoincrement=False, nullable=False)
    )
    op.drop_constraint("fk_memodel_strain_id_species_id", "memodel", type_="foreignkey")
    op.drop_constraint(
        op.f("fk_memodel_mmodel_id_reconstruction_morphology"), "memodel", type_="foreignkey"
    )
    op.drop_constraint(op.f("fk_memodel_emodel_id_emodel"), "memodel", type_="foreignkey")
    op.drop_constraint(op.f("fk_memodel_species_id_species"), "memodel", type_="foreignkey")
    op.drop_index(op.f("ix_memodel_strain_id"), table_name="memodel")
    op.drop_index(op.f("ix_memodel_species_id"), table_name="memodel")
    op.drop_index("ix_memodel_description_vector", table_name="memodel", postgresql_using="gin")
    op.drop_column("memodel", "strain_id")
    op.drop_column("memodel", "species_id")
    op.drop_column("memodel", "description_vector")
    op.drop_column("memodel", "emodel_id")
    op.drop_column("memodel", "mmodel_id")
    op.drop_column("memodel", "validation_status")
    sa.Enum(
        "created", "initialized", "running", "done", "error", name="me_model_validation_status"
    ).drop(op.get_bind())
    # ### end Alembic commands ###
