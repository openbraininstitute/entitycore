"""Default migration message

Revision ID: b861d5b97dbe
Revises: 928c1b2f7cf8
Create Date: 2025-03-25 15:33:05.195499

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "b861d5b97dbe"
down_revision: str | None = "928c1b2f7cf8"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "single_neuron_synaptome_simulation",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("injectionLocation", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column("recordingLocation", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "started",
                "failure",
                "success",
                name="singleneuronsimulationstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("synaptome_id", sa.Uuid(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_single_neuron_synaptome_simulation_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_single_neuron_synaptome_simulation_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["synaptome_id"],
            ["single_neuron_synaptome.id"],
            name=op.f("fk_single_neuron_synaptome_simulation_synaptome_id_single_neuron_synaptome"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_single_neuron_synaptome_simulation")),
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_simulation_brain_region_id"),
        "single_neuron_synaptome_simulation",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_neuron_synaptome_simulation_description_vector",
        "single_neuron_synaptome_simulation",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_simulation_synaptome_id"),
        "single_neuron_synaptome_simulation",
        ["synaptome_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_neuron_simulation_description_vector",
        "single_neuron_simulation",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.add_column(
        "single_neuron_synaptome",
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
    )
    op.create_index(
        "ix_single_neuron_synaptome_description_vector",
        "single_neuron_synaptome",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

    op.drop_index(
        "ix_single_neuron_synaptome_description_vector",
        table_name="single_neuron_synaptome",
        postgresql_using="gin",
    )
    op.drop_column("single_neuron_synaptome", "description_vector")
    op.drop_index(
        "ix_single_neuron_simulation_description_vector",
        table_name="single_neuron_simulation",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_single_neuron_synaptome_simulation_synaptome_id"),
        table_name="single_neuron_synaptome_simulation",
    )
    op.drop_index(
        "ix_single_neuron_synaptome_simulation_description_vector",
        table_name="single_neuron_synaptome_simulation",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_single_neuron_synaptome_simulation_brain_region_id"),
        table_name="single_neuron_synaptome_simulation",
    )
    op.drop_table("single_neuron_synaptome_simulation")
    # ### end Alembic commands ###
