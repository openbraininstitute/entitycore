"""Default migration message

Revision ID: 47bdd5c0c813
Revises: 3bb17e1231d6
Create Date: 2025-03-31 18:52:02.294553

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "47bdd5c0c813"
down_revision: str | None = "3bb17e1231d6"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("intracellular", "extracellular", "both", name="electricalrecordingtype").create(
        op.get_bind()
    )
    sa.Enum("male", "female", name="sex").create(op.get_bind())
    op.create_table(
        "electrical_cell_recording",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "recordingType",
            postgresql.ENUM(
                "intracellular",
                "extracellular",
                "both",
                name="electricalrecordingtype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("recordingLocation", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column("ljp", sa.Float(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.BigInteger(), nullable=False),
        sa.Column("subject_id", sa.Uuid(), nullable=True),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_electrical_cell_recording_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_electrical_cell_recording_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_electrical_cell_recording_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
            name=op.f("fk_electrical_cell_recording_subject_id_subject"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_electrical_cell_recording")),
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_brain_region_id"),
        "electrical_cell_recording",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_electrical_cell_recording_description_vector",
        "electrical_cell_recording",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_license_id"),
        "electrical_cell_recording",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_name"),
        "electrical_cell_recording",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_subject_id"),
        "electrical_cell_recording",
        ["subject_id"],
        unique=False,
    )
    op.create_table(
        "sub_cellular_model_script",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("temperature", sa.Float(), nullable=False),
        sa.Column("is_temperature_dependent", sa.Boolean(), nullable=False),
        sa.Column("is_jjp_corrected", sa.Boolean(), nullable=False),
        sa.Column("is_stochastic", sa.Boolean(), nullable=False),
        sa.Column("brain_region_id", sa.BigInteger(), nullable=False),
        sa.Column("subject_id", sa.Uuid(), nullable=True),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_sub_cellular_model_script_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_sub_cellular_model_script_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_sub_cellular_model_script_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
            name=op.f("fk_sub_cellular_model_script_subject_id_subject"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sub_cellular_model_script")),
    )
    op.create_index(
        op.f("ix_sub_cellular_model_script_brain_region_id"),
        "sub_cellular_model_script",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sub_cellular_model_script_license_id"),
        "sub_cellular_model_script",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_sub_cellular_model_script_subject_id"),
        "sub_cellular_model_script",
        ["subject_id"],
        unique=False,
    )
    op.drop_index(
        "ix_single_cell_experimental_trace_brain_region_id",
        table_name="single_cell_experimental_trace",
    )
    op.drop_index(
        "ix_single_cell_experimental_trace_license_id", table_name="single_cell_experimental_trace"
    )
    op.drop_index(
        "ix_single_cell_experimental_trace_name", table_name="single_cell_experimental_trace"
    )
    op.drop_index(
        "ix_single_cell_experimental_trace_species_id", table_name="single_cell_experimental_trace"
    )
    op.drop_index(
        "ix_single_cell_experimental_trace_strain_id", table_name="single_cell_experimental_trace"
    )
    op.drop_table("single_cell_experimental_trace")
    op.add_column("subject", sa.Column("age", sa.Integer(), nullable=True))
    op.add_column(
        "subject",
        sa.Column(
            "sex", postgresql.ENUM("male", "female", name="sex", create_type=False), nullable=True
        ),
    )
    op.add_column("subject", sa.Column("weight", sa.Float(), nullable=True))
    op.add_column("subject", sa.Column("species_id", sa.Uuid(), nullable=False))
    op.add_column("subject", sa.Column("strain_id", sa.Uuid(), nullable=True))
    op.drop_index("ix_subject_name", table_name="subject")
    op.create_index(op.f("ix_subject_species_id"), "subject", ["species_id"], unique=False)
    op.create_index(op.f("ix_subject_strain_id"), "subject", ["strain_id"], unique=False)
    op.create_foreign_key(
        "fk_subject_strain_id_species_id",
        "subject",
        "strain",
        ["strain_id", "species_id"],
        ["id", "species_id"],
    )
    op.create_foreign_key(
        op.f("fk_subject_species_id_species"), "subject", "species", ["species_id"], ["id"]
    )
    op.drop_column("subject", "name")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("subject", sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f("fk_subject_species_id_species"), "subject", type_="foreignkey")
    op.drop_constraint("fk_subject_strain_id_species_id", "subject", type_="foreignkey")
    op.drop_index(op.f("ix_subject_strain_id"), table_name="subject")
    op.drop_index(op.f("ix_subject_species_id"), table_name="subject")
    op.create_index("ix_subject_name", "subject", ["name"], unique=True)
    op.drop_column("subject", "strain_id")
    op.drop_column("subject", "species_id")
    op.drop_column("subject", "weight")
    op.drop_column("subject", "sex")
    op.drop_column("subject", "age")
    op.create_table(
        "single_cell_experimental_trace",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("brain_region_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("species_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("strain_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("license_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name="fk_single_cell_experimental_trace_brain_region_id_brain_region",
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name="fk_single_cell_experimental_trace_id_entity"
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name="fk_single_cell_experimental_trace_license_id_license",
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name="fk_single_cell_experimental_trace_species_id_species",
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_single_cell_experimental_trace_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_single_cell_experimental_trace"),
    )
    op.create_index(
        "ix_single_cell_experimental_trace_strain_id",
        "single_cell_experimental_trace",
        ["strain_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_cell_experimental_trace_species_id",
        "single_cell_experimental_trace",
        ["species_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_cell_experimental_trace_name",
        "single_cell_experimental_trace",
        ["name"],
        unique=False,
    )
    op.create_index(
        "ix_single_cell_experimental_trace_license_id",
        "single_cell_experimental_trace",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_cell_experimental_trace_brain_region_id",
        "single_cell_experimental_trace",
        ["brain_region_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_sub_cellular_model_script_subject_id"), table_name="sub_cellular_model_script"
    )
    op.drop_index(
        op.f("ix_sub_cellular_model_script_license_id"), table_name="sub_cellular_model_script"
    )
    op.drop_index(
        op.f("ix_sub_cellular_model_script_brain_region_id"), table_name="sub_cellular_model_script"
    )
    op.drop_table("sub_cellular_model_script")
    op.drop_index(
        op.f("ix_electrical_cell_recording_subject_id"), table_name="electrical_cell_recording"
    )
    op.drop_index(op.f("ix_electrical_cell_recording_name"), table_name="electrical_cell_recording")
    op.drop_index(
        op.f("ix_electrical_cell_recording_license_id"), table_name="electrical_cell_recording"
    )
    op.drop_index(
        "ix_electrical_cell_recording_description_vector",
        table_name="electrical_cell_recording",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_electrical_cell_recording_brain_region_id"), table_name="electrical_cell_recording"
    )
    op.drop_table("electrical_cell_recording")
    sa.Enum("male", "female", name="sex").drop(op.get_bind())
    sa.Enum("intracellular", "extracellular", "both", name="electricalrecordingtype").drop(
        op.get_bind()
    )
    # ### end Alembic commands ###
