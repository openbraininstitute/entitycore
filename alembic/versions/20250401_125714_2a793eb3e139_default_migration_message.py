"""Default migration message

Revision ID: 2a793eb3e139
Revises: 624f4f1a6331
Create Date: 2025-04-01 12:57:14.080524

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "2a793eb3e139"
down_revision: str | None = "624f4f1a6331"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_subject_creation_date", table_name="subject")
    op.create_foreign_key(op.f("fk_subject_id_entity"), "subject", "entity", ["id"], ["id"])
    op.drop_column("subject", "creation_date")
    op.drop_column("subject", "update_date")
    op.sync_enum_values(
        enum_schema="public",
        enum_name="electricalrecordingtype",
        new_values=["intracellular", "extracellular", "both", "unknown"],
        affected_columns=[
            TableReference(
                table_schema="public",
                table_name="electrical_cell_recording",
                column_name="recordingType",
            )
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="electricalrecordingtype",
        new_values=["intracellular", "extracellular", "both"],
        affected_columns=[
            TableReference(
                table_schema="public",
                table_name="electrical_cell_recording",
                column_name="recordingType",
            )
        ],
        enum_values_to_rename=[],
    )
    op.add_column(
        "subject",
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "subject",
        sa.Column(
            "creation_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(op.f("fk_subject_id_entity"), "subject", type_="foreignkey")
    op.create_index("ix_subject_creation_date", "subject", ["creation_date"], unique=False)
    # ### end Alembic commands ###
