"""Default migration message

Revision ID: 72c5253bf9b1
Revises: 34b450f37cbb
Create Date: 2025-04-04 10:29:55.593672

"""

from collections.abc import Sequence

from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "72c5253bf9b1"
down_revision: str | None = "34b450f37cbb"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_reconstruction_morphology_morphology_description_vector = PGTrigger(
        schema="public",
        signature="morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_reconstruction_morphology_morphology_description_vector)

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_emodel_emodel_description_vector)

    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_memodel_memodel_description_vector)

    public_single_neuron_simulation_single_neuron_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_simulation_description_vector",
        on_entity="public.single_neuron_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_single_neuron_simulation_single_neuron_simulation_description_vector)

    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

    public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_simulation_description_vector",
        on_entity="public.single_neuron_synaptome_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector
    )

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.create_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.drop_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology
    )

    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_simulation_description_vector",
        on_entity="public.single_neuron_synaptome_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector
    )

    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

    public_single_neuron_simulation_single_neuron_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_simulation_description_vector",
        on_entity="public.single_neuron_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_simulation_single_neuron_simulation_description_vector)

    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_memodel_memodel_description_vector)

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_emodel_emodel_description_vector)

    public_reconstruction_morphology_morphology_description_vector = PGTrigger(
        schema="public",
        signature="morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_reconstruction_morphology_morphology_description_vector)

    # ### end Alembic commands ###
