"""Default migration message

Revision ID: fc2a6e745865
Revises: 0f59f5993a23
Create Date: 2025-04-08 10:40:27.097324

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "fc2a6e745865"
down_revision: str | None = "0f59f5993a23"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "analysis_software_source_code",
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
    )
    op.create_index(
        "ix_analysis_software_source_code_description_vector",
        "analysis_software_source_code",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_analysis_software_source_code_name"),
        "analysis_software_source_code",
        ["name"],
        unique=False,
    )
    op.create_index(op.f("ix_emodel_name"), "emodel", ["name"], unique=False)
    op.add_column(
        "experimental_bouton_density",
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
    )
    op.create_index(
        "ix_experimental_bouton_density_description_vector",
        "experimental_bouton_density",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.add_column(
        "experimental_neuron_density",
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
    )
    op.create_index(
        "ix_experimental_neuron_density_description_vector",
        "experimental_neuron_density",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.add_column(
        "experimental_synapses_per_connection",
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
    )
    op.create_index(
        "ix_experimental_synapses_per_connection_description_vector",
        "experimental_synapses_per_connection",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_memodel_name"), "memodel", ["name"], unique=False)
    op.add_column("mesh", sa.Column("name", sa.String(), nullable=False))
    op.add_column("mesh", sa.Column("description", sa.String(), nullable=False))
    op.add_column("mesh", sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True))
    op.create_index(
        "ix_mesh_description_vector",
        "mesh",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_mesh_name"), "mesh", ["name"], unique=False)
    op.add_column(
        "single_cell_experimental_trace",
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
    )
    op.create_index(
        "ix_single_cell_experimental_trace_description_vector",
        "single_cell_experimental_trace",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_single_neuron_simulation_name"), "single_neuron_simulation", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_name"), "single_neuron_synaptome", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_simulation_name"),
        "single_neuron_synaptome_simulation",
        ["name"],
        unique=False,
    )
    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_mesh_mesh_description_vector)

    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
    )

    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
    )

    public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector = PGTrigger(
        schema="public",
        signature="single_cell_experimental_trace_description_vector",
        on_entity="public.single_cell_experimental_trace",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_cell_experimental_trace\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector
    )

    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_reconstruction_morphology_morphology_description_vector = PGTrigger(
        schema="public",
        signature="morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.reconstruction_morphology FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.drop_entity(public_reconstruction_morphology_morphology_description_vector)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_reconstruction_morphology_morphology_description_vector = PGTrigger(
        schema="public",
        signature="morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.reconstruction_morphology FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.create_entity(public_reconstruction_morphology_morphology_description_vector)

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

    public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector = PGTrigger(
        schema="public",
        signature="single_cell_experimental_trace_description_vector",
        on_entity="public.single_cell_experimental_trace",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_cell_experimental_trace\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector
    )

    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
    )

    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
    )

    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_mesh_mesh_description_vector)

    op.drop_index(
        op.f("ix_single_neuron_synaptome_simulation_name"),
        table_name="single_neuron_synaptome_simulation",
    )
    op.drop_index(op.f("ix_single_neuron_synaptome_name"), table_name="single_neuron_synaptome")
    op.drop_index(op.f("ix_single_neuron_simulation_name"), table_name="single_neuron_simulation")
    op.drop_index(
        "ix_single_cell_experimental_trace_description_vector",
        table_name="single_cell_experimental_trace",
        postgresql_using="gin",
    )
    op.drop_column("single_cell_experimental_trace", "description_vector")
    op.drop_index(op.f("ix_mesh_name"), table_name="mesh")
    op.drop_index("ix_mesh_description_vector", table_name="mesh", postgresql_using="gin")
    op.drop_column("mesh", "description_vector")
    op.drop_column("mesh", "description")
    op.drop_column("mesh", "name")
    op.drop_index(op.f("ix_memodel_name"), table_name="memodel")
    op.drop_index(
        "ix_experimental_synapses_per_connection_description_vector",
        table_name="experimental_synapses_per_connection",
        postgresql_using="gin",
    )
    op.drop_column("experimental_synapses_per_connection", "description_vector")
    op.drop_index(
        "ix_experimental_neuron_density_description_vector",
        table_name="experimental_neuron_density",
        postgresql_using="gin",
    )
    op.drop_column("experimental_neuron_density", "description_vector")
    op.drop_index(
        "ix_experimental_bouton_density_description_vector",
        table_name="experimental_bouton_density",
        postgresql_using="gin",
    )
    op.drop_column("experimental_bouton_density", "description_vector")
    op.drop_index(op.f("ix_emodel_name"), table_name="emodel")
    op.drop_index(
        op.f("ix_analysis_software_source_code_name"), table_name="analysis_software_source_code"
    )
    op.drop_index(
        "ix_analysis_software_source_code_description_vector",
        table_name="analysis_software_source_code",
        postgresql_using="gin",
    )
    op.drop_column("analysis_software_source_code", "description_vector")
    # ### end Alembic commands ###
