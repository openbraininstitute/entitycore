"""Default migration message

Revision ID: 62efc1917a56
Revises: 77c785b4d309
Create Date: 2025-04-09 03:11:09.069047

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "62efc1917a56"
down_revision: str | None = "77c785b4d309"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ion_channel_model",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("identifier", sa.String(), nullable=False),
        sa.Column("modelId", sa.String(), nullable=False),
        sa.Column("is_ljp_corrected", sa.Boolean(), nullable=False),
        sa.Column("is_temperature_dependent", sa.Boolean(), nullable=False),
        sa.Column("temperature_celsius", sa.Integer(), nullable=False),
        sa.Column("nmodl_parameters", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("emodel_id", sa.Uuid(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.BigInteger(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_ion_channel_model_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["emodel_id"], ["emodel.id"], name=op.f("fk_ion_channel_model_emodel_id_emodel")
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_ion_channel_model_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_ion_channel_model_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_ion_channel_model_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel_model")),
    )
    op.create_index(
        op.f("ix_ion_channel_model_brain_region_id"),
        "ion_channel_model",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_ion_channel_model_description_vector",
        "ion_channel_model",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_ion_channel_model_name"), "ion_channel_model", ["name"], unique=False)
    op.create_index(
        op.f("ix_ion_channel_model_species_id"), "ion_channel_model", ["species_id"], unique=False
    )
    op.create_index(
        op.f("ix_ion_channel_model_strain_id"), "ion_channel_model", ["strain_id"], unique=False
    )
    op.drop_index("ix_ion_chanel_model_brain_region_id", table_name="ion_chanel_model")
    op.drop_index(
        "ix_ion_chanel_model_description_vector",
        table_name="ion_chanel_model",
        postgresql_using="gin",
    )
    op.drop_index("ix_ion_chanel_model_name", table_name="ion_chanel_model")
    op.drop_index("ix_ion_chanel_model_species_id", table_name="ion_chanel_model")
    op.drop_index("ix_ion_chanel_model_strain_id", table_name="ion_chanel_model")
    op.drop_table("ion_chanel_model")
    op.drop_constraint(
        "fk_ion_channel_association_ion_channel_model_id_ion_cha_b632",
        "ion_channel_association",
        type_="foreignkey",
    )
    op.drop_constraint(
        "fk_ion_channel_association_ion_id_ion", "ion_channel_association", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_ion_channel_association_ion_channel_model_id_ion_channel_model"),
        "ion_channel_association",
        "ion_channel_model",
        ["ion_channel_model_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_ion_channel_association_ion_id_ion"),
        "ion_channel_association",
        "ion",
        ["ion_id"],
        ["id"],
        ondelete="CASCADE",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        op.f("fk_ion_channel_association_ion_id_ion"), "ion_channel_association", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("fk_ion_channel_association_ion_channel_model_id_ion_channel_model"),
        "ion_channel_association",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "fk_ion_channel_association_ion_id_ion",
        "ion_channel_association",
        "ion",
        ["ion_id"],
        ["id"],
    )
    op.create_foreign_key(
        "fk_ion_channel_association_ion_channel_model_id_ion_cha_b632",
        "ion_channel_association",
        "ion_chanel_model",
        ["ion_channel_model_id"],
        ["id"],
    )
    op.create_table(
        "ion_chanel_model",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("identifier", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("modelId", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("is_ljp_corrected", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_temperature_dependent", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("temperature_celsius", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "nmodl_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("description_vector", postgresql.TSVECTOR(), autoincrement=False, nullable=True),
        sa.Column("brain_region_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("species_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("strain_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("emodel_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name="fk_ion_chanel_model_brain_region_id_brain_region",
        ),
        sa.ForeignKeyConstraint(
            ["emodel_id"], ["emodel.id"], name="fk_ion_chanel_model_emodel_id_emodel"
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name="fk_ion_chanel_model_id_entity"),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name="fk_ion_chanel_model_species_id_species"
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_ion_chanel_model_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_ion_chanel_model"),
    )
    op.create_index(
        "ix_ion_chanel_model_strain_id", "ion_chanel_model", ["strain_id"], unique=False
    )
    op.create_index(
        "ix_ion_chanel_model_species_id", "ion_chanel_model", ["species_id"], unique=False
    )
    op.create_index("ix_ion_chanel_model_name", "ion_chanel_model", ["name"], unique=False)
    op.create_index(
        "ix_ion_chanel_model_description_vector",
        "ion_chanel_model",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        "ix_ion_chanel_model_brain_region_id", "ion_chanel_model", ["brain_region_id"], unique=False
    )
    op.drop_index(op.f("ix_ion_channel_model_strain_id"), table_name="ion_channel_model")
    op.drop_index(op.f("ix_ion_channel_model_species_id"), table_name="ion_channel_model")
    op.drop_index(op.f("ix_ion_channel_model_name"), table_name="ion_channel_model")
    op.drop_index(
        "ix_ion_channel_model_description_vector",
        table_name="ion_channel_model",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_ion_channel_model_brain_region_id"), table_name="ion_channel_model")
    op.drop_table("ion_channel_model")
    # ### end Alembic commands ###
