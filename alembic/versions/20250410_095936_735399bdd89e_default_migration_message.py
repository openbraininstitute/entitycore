"""Default migration message

Revision ID: 735399bdd89e
Revises: cfa8b22ee693
Create Date: 2025-04-10 09:59:36.189330

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "735399bdd89e"
down_revision: str | None = "cfa8b22ee693"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("in_vivo", "in_vitro", "in_silico", "unknown", name="electricalrecordingorigin").create(
        op.get_bind()
    )
    op.add_column(
        "electrical_cell_recording",
        sa.Column(
            "recording_type",
            postgresql.ENUM(
                "intracellular",
                "extracellular",
                "both",
                "unknown",
                name="electricalrecordingtype",
                create_type=False,
            ),
            nullable=False,
        ),
    )
    op.add_column(
        "electrical_cell_recording",
        sa.Column(
            "recording_origin",
            postgresql.ENUM(
                "in_vivo",
                "in_vitro",
                "in_silico",
                "unknown",
                name="electricalrecordingorigin",
                create_type=False,
            ),
            nullable=False,
        ),
    )
    op.add_column(
        "electrical_cell_recording",
        sa.Column("recording_location", sa.ARRAY(sa.VARCHAR()), nullable=False),
    )
    op.drop_column("electrical_cell_recording", "recordingType")
    op.drop_column("electrical_cell_recording", "recordingLocation")
    op.add_column(
        "electrical_recording_stimulus",
        sa.Column(
            "injection_type",
            postgresql.ENUM(
                "voltage_clamp",
                "current_clamp",
                "conductance_clamp",
                "extracellular",
                "other",
                "unknown",
                name="electricalrecordingstimulustype",
                create_type=False,
            ),
            nullable=False,
        ),
    )
    op.add_column(
        "electrical_recording_stimulus",
        sa.Column(
            "shape",
            postgresql.ENUM(
                "step",
                "ramp",
                "noise",
                "sinusoidal",
                "other",
                "unknown",
                name="electricalrecordingstimulusshape",
                create_type=False,
            ),
            nullable=False,
        ),
    )
    op.add_column(
        "electrical_recording_stimulus", sa.Column("start_time", sa.Float(), nullable=True)
    )
    op.add_column("electrical_recording_stimulus", sa.Column("end_time", sa.Float(), nullable=True))
    op.drop_column("electrical_recording_stimulus", "stimulus_start_time")
    op.drop_column("electrical_recording_stimulus", "stimulus_shape")
    op.drop_column("electrical_recording_stimulus", "stimulus_injection_type")
    op.drop_column("electrical_recording_stimulus", "stimulus_end_time")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "electrical_recording_stimulus",
        sa.Column(
            "stimulus_end_time",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "electrical_recording_stimulus",
        sa.Column(
            "stimulus_injection_type",
            postgresql.ENUM(
                "voltage_clamp",
                "current_clamp",
                "conductance_clamp",
                "extracellular",
                "other",
                "unknown",
                name="electricalrecordingstimulustype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "electrical_recording_stimulus",
        sa.Column(
            "stimulus_shape",
            postgresql.ENUM(
                "step",
                "ramp",
                "noise",
                "sinusoidal",
                "other",
                "unknown",
                name="electricalrecordingstimulusshape",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "electrical_recording_stimulus",
        sa.Column(
            "stimulus_start_time",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_column("electrical_recording_stimulus", "end_time")
    op.drop_column("electrical_recording_stimulus", "start_time")
    op.drop_column("electrical_recording_stimulus", "shape")
    op.drop_column("electrical_recording_stimulus", "injection_type")
    op.add_column(
        "electrical_cell_recording",
        sa.Column(
            "recordingLocation", postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=False
        ),
    )
    op.add_column(
        "electrical_cell_recording",
        sa.Column(
            "recordingType",
            postgresql.ENUM(
                "intracellular",
                "extracellular",
                "both",
                "unknown",
                name="electricalrecordingtype",
                create_type=False,
            ),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_column("electrical_cell_recording", "recording_location")
    op.drop_column("electrical_cell_recording", "recording_origin")
    op.drop_column("electrical_cell_recording", "recording_type")
    sa.Enum("in_vivo", "in_vitro", "in_silico", "unknown", name="electricalrecordingorigin").drop(
        op.get_bind()
    )
    # ### end Alembic commands ###
