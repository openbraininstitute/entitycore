"""Default migration message

Revision ID: d1f17fcb1667
Revises: fc2a6e745865
Create Date: 2025-04-15 16:00:26.367011

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "d1f17fcb1667"
down_revision: str | None = "fc2a6e745865"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("male", "female", "unknown", name="sex").create(op.get_bind())
    sa.Enum("prenatal", "postnatal", "unknown", name="ageperiod").create(op.get_bind())
    op.add_column("subject", sa.Column("age_value", sa.Interval(), nullable=True))
    op.add_column("subject", sa.Column("age_min", sa.Interval(), nullable=True))
    op.add_column("subject", sa.Column("age_max", sa.Interval(), nullable=True))
    op.add_column(
        "subject",
        sa.Column(
            "age_period",
            postgresql.ENUM(
                "prenatal", "postnatal", "unknown", name="ageperiod", create_type=False
            ),
            nullable=True,
        ),
    )
    op.add_column(
        "subject",
        sa.Column(
            "sex",
            postgresql.ENUM("male", "female", "unknown", name="sex", create_type=False),
            nullable=True,
        ),
    )
    op.add_column("subject", sa.Column("weight", sa.Float(), nullable=True))
    op.add_column("subject", sa.Column("description", sa.String(), nullable=False))
    op.add_column("subject", sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True))
    op.add_column("subject", sa.Column("species_id", sa.Uuid(), nullable=False))
    op.add_column("subject", sa.Column("strain_id", sa.Uuid(), nullable=True))
    op.drop_index("ix_subject_creation_date", table_name="subject")
    op.drop_index("ix_subject_name", table_name="subject")
    op.create_index(op.f("ix_subject_name"), "subject", ["name"], unique=False)
    op.create_index(
        "ix_subject_description_vector",
        "subject",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_subject_species_id"), "subject", ["species_id"], unique=False)
    op.create_index(op.f("ix_subject_strain_id"), "subject", ["strain_id"], unique=False)
    op.create_foreign_key(
        op.f("fk_subject_species_id_species"), "subject", "species", ["species_id"], ["id"]
    )
    op.create_foreign_key(
        "fk_subject_strain_id_species_id",
        "subject",
        "strain",
        ["strain_id", "species_id"],
        ["id", "species_id"],
    )
    op.create_foreign_key(op.f("fk_subject_id_entity"), "subject", "entity", ["id"], ["id"])
    op.drop_column("subject", "update_date")
    op.drop_column("subject", "creation_date")
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "memodel",
            "mesh",
            "reconstruction_morphology",
            "single_cell_experimental_trace",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "memodel",
            "mesh",
            "reconstruction_morphology",
            "single_cell_experimental_trace",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.add_column(
        "subject",
        sa.Column(
            "creation_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "subject",
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.drop_constraint(op.f("fk_subject_id_entity"), "subject", type_="foreignkey")
    op.drop_constraint("fk_subject_strain_id_species_id", "subject", type_="foreignkey")
    op.drop_constraint(op.f("fk_subject_species_id_species"), "subject", type_="foreignkey")
    op.drop_index(op.f("ix_subject_strain_id"), table_name="subject")
    op.drop_index(op.f("ix_subject_species_id"), table_name="subject")
    op.drop_index("ix_subject_description_vector", table_name="subject", postgresql_using="gin")
    op.drop_index(op.f("ix_subject_name"), table_name="subject")
    op.create_index("ix_subject_name", "subject", ["name"], unique=True)
    op.create_index("ix_subject_creation_date", "subject", ["creation_date"], unique=False)
    op.drop_column("subject", "strain_id")
    op.drop_column("subject", "species_id")
    op.drop_column("subject", "description_vector")
    op.drop_column("subject", "description")
    op.drop_column("subject", "weight")
    op.drop_column("subject", "sex")
    op.drop_column("subject", "age_period")
    op.drop_column("subject", "age_max")
    op.drop_column("subject", "age_min")
    op.drop_column("subject", "age_value")
    sa.Enum("prenatal", "postnatal", "unknown", name="ageperiod").drop(op.get_bind())
    sa.Enum("male", "female", "unknown", name="sex").drop(op.get_bind())
    # ### end Alembic commands ###
