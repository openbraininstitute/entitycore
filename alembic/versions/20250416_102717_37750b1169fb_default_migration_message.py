"""Default migration message

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
Revision ID: 336550bc1770
Revises: b1731be77ce4
Create Date: 2025-04-22 15:29:42.010788
========
Revision ID: 37750b1169fb
Revises: 0773b0796b42
Create Date: 2025-04-16 10:27:17.747374
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py

"""

from collections.abc import Sequence

from alembic_utils.pg_function import PGFunction
from alembic_utils.pg_trigger import PGTrigger

from alembic import op

# revision identifiers, used by Alembic.
<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
revision: str = "336550bc1770"
down_revision: str | None = "b1731be77ce4"
========
revision: str = "37750b1169fb"
down_revision: str | None = "0773b0796b42"
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_mesh_mesh_description_vector)

    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
========
    public_memodel_memodel_description_vector = PGTrigger(
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
    )

    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_memodel_memodel_description_vector)

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_electrical_cell_recording_electrical_cell_recording_description_vector = PGTrigger(
        schema="public",
        signature="electrical_cell_recording_description_vector",
        on_entity="public.electrical_cell_recording",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON electrical_cell_recording\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_electrical_cell_recording_electrical_cell_recording_description_vector)

    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
========
    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

    public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector = PGTrigger(
        schema="public",
        signature="single_cell_experimental_trace_description_vector",
        on_entity="public.single_cell_experimental_trace",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_cell_experimental_trace\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector
    )

    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py
    public_subject_subject_description_vector = PGTrigger(
        schema="public",
        signature="subject_description_vector",
        on_entity="public.subject",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON subject\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_subject_subject_description_vector)

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
========
    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_mesh_mesh_description_vector)

    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py
    )

    public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_simulation_description_vector",
        on_entity="public.single_neuron_synaptome_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector
    )

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_emodel_emodel_description_vector)

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
    )
========
    public_single_neuron_simulation_single_neuron_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_simulation_description_vector",
        on_entity="public.single_neuron_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_single_neuron_simulation_single_neuron_simulation_description_vector)
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.create_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.drop_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology
    )

    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
    )
========
    public_single_neuron_simulation_single_neuron_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_simulation_description_vector",
        on_entity="public.single_neuron_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_simulation_single_neuron_simulation_description_vector)
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_emodel_emodel_description_vector)

    public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_simulation_description_vector",
        on_entity="public.single_neuron_synaptome_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector
    )

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
    )

========
    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
    )

    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_mesh_mesh_description_vector)

>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py
    public_subject_subject_description_vector = PGTrigger(
        schema="public",
        signature="subject_description_vector",
        on_entity="public.subject",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON subject\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_subject_subject_description_vector)

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
========
    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

    public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector = PGTrigger(
        schema="public",
        signature="single_cell_experimental_trace_description_vector",
        on_entity="public.single_cell_experimental_trace",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_cell_experimental_trace\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_single_cell_experimental_trace_single_cell_experimental_trace_description_vector
    )

    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py
    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
    public_electrical_cell_recording_electrical_cell_recording_description_vector = PGTrigger(
        schema="public",
        signature="electrical_cell_recording_description_vector",
        on_entity="public.electrical_cell_recording",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON electrical_cell_recording\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_electrical_cell_recording_electrical_cell_recording_description_vector)
========
    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
    )
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_memodel_memodel_description_vector)

<<<<<<<< HEAD:alembic/versions/20250422_152942_336550bc1770_default_migration_message.py
    public_single_neuron_simulation_single_neuron_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_simulation_description_vector",
        on_entity="public.single_neuron_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_simulation_single_neuron_simulation_description_vector)

    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_mesh_mesh_description_vector)

========
>>>>>>>> 87732e9 (Improve density models):alembic/versions/20250416_102717_37750b1169fb_default_migration_message.py
    # ### end Alembic commands ###
