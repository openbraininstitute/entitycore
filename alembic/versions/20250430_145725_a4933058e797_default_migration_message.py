"""Default migration message

Revision ID: a4933058e797
Revises: a45638c6f52a
Create Date: 2025-04-30 14:57:25.230812

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "a4933058e797"
down_revision: Union[str, None] = "a45638c6f52a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("apical_dendrite", "basal_dendrite", "axon", name="structuraldomain").create(
        op.get_bind()
    )
    op.create_table(
        "measurement_annotation",
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_measurement_annotation_entity_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_annotation")),
    )
    op.create_index(
        op.f("ix_measurement_annotation_creation_date"),
        "measurement_annotation",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_measurement_annotation_entity_id"),
        "measurement_annotation",
        ["entity_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_measurement_annotation_legacy_id"),
        "measurement_annotation",
        ["legacy_id"],
        unique=False,
    )
    op.create_table(
        "measurement_kind",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=True),
        sa.Column(
            "structural_domain",
            postgresql.ENUM(
                "apical_dendrite",
                "basal_dendrite",
                "axon",
                name="structuraldomain",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("measurement_annotation_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["measurement_annotation_id"],
            ["measurement_annotation.id"],
            name=op.f("fk_measurement_kind_measurement_annotation_id_measurement_annotation"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_kind")),
        sa.UniqueConstraint(
            "measurement_annotation_id",
            "pref_label",
            "structural_domain",
            name="uq_measurement_kind_measurement_annotation_id",
            postgresql_nulls_not_distinct=True,
        ),
    )
    op.create_index(
        op.f("ix_measurement_kind_measurement_annotation_id"),
        "measurement_kind",
        ["measurement_annotation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_measurement_kind_pref_label"), "measurement_kind", ["pref_label"], unique=False
    )
    op.create_table(
        "measurement_item",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column(
            "name",
            postgresql.ENUM(
                "mean",
                "median",
                "mode",
                "variance",
                "data_point",
                "sample_size",
                "standard_error",
                "standard_deviation",
                "raw",
                "minimum",
                "maximum",
                "sum",
                "n",
                name="measurementstatistic",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "unit",
            postgresql.ENUM(
                "dimensionless",
                "linear_density__1_um",
                "volume_density__1_mm3",
                "linear__um",
                "area__um2",
                "volume__mm3",
                "angle__radian",
                "dhv",
                name="measurementunit",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("measurement_kind_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["measurement_kind_id"],
            ["measurement_kind.id"],
            name=op.f("fk_measurement_item_measurement_kind_id_measurement_kind"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_item")),
        sa.UniqueConstraint(
            "measurement_kind_id",
            "name",
            name="uq_measurement_item_measurement_kind_id",
            postgresql_nulls_not_distinct=True,
        ),
    )
    op.create_index(
        op.f("ix_measurement_item_measurement_kind_id"),
        "measurement_item",
        ["measurement_kind_id"],
        unique=False,
    )
    op.drop_index(
        "ix_measurement_serie_element_measurement_id", table_name="measurement_serie_element"
    )
    op.drop_index("ix_measurement_measurement_of", table_name="measurement")
    op.drop_index("ix_measurement_morphology_feature_annotation_id", table_name="measurement")
    op.drop_index(
        "ix_morphology_feature_annotation_creation_date", table_name="morphology_feature_annotation"
    )
    op.drop_index(
        "ix_morphology_feature_annotation_reconstruction_morphology_id",
        table_name="morphology_feature_annotation",
    )
    op.drop_table("measurement_serie_element")
    op.drop_table("measurement")
    op.drop_table("morphology_feature_annotation")
    op.add_column("entity", sa.Column("measurement_annotation_id", sa.Uuid(), nullable=True))
    op.create_index(
        op.f("ix_entity_measurement_annotation_id"),
        "entity",
        ["measurement_annotation_id"],
        unique=True,
    )
    op.create_foreign_key(
        op.f("fk_entity_measurement_annotation_id_measurement_annotation"),
        "entity",
        "measurement_annotation",
        ["measurement_annotation_id"],
        ["id"],
        use_alter=True,
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="measurementstatistic",
        new_values=[
            "mean",
            "median",
            "mode",
            "variance",
            "data_point",
            "sample_size",
            "standard_error",
            "standard_deviation",
            "raw",
            "minimum",
            "maximum",
            "sum",
            "n",
        ],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="measurement_item", column_name="name"
            ),
            TableReference(
                table_schema="public", table_name="measurement_record", column_name="name"
            ),
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="measurementunit",
        new_values=[
            "dimensionless",
            "linear_density__1_um",
            "volume_density__1_mm3",
            "linear__um",
            "area__um2",
            "volume__mm3",
            "angle__radian",
            "dhv",
        ],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="measurement_item", column_name="unit"
            ),
            TableReference(
                table_schema="public", table_name="measurement_record", column_name="unit"
            ),
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="measurementunit",
        new_values=["dimensionless", "linear_density__1_um", "volume_density__1_mm3"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="measurement_item", column_name="unit"
            ),
            TableReference(
                table_schema="public", table_name="measurement_record", column_name="unit"
            ),
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="measurementstatistic",
        new_values=[
            "mean",
            "median",
            "mode",
            "variance",
            "data_point",
            "sample_size",
            "standard_error",
            "standard_deviation",
        ],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="measurement_item", column_name="name"
            ),
            TableReference(
                table_schema="public", table_name="measurement_record", column_name="name"
            ),
        ],
        enum_values_to_rename=[],
    )
    op.drop_constraint(
        op.f("fk_entity_measurement_annotation_id_measurement_annotation"),
        "entity",
        type_="foreignkey",
    )
    op.drop_index(op.f("ix_entity_measurement_annotation_id"), table_name="entity")
    op.drop_column("entity", "measurement_annotation_id")
    op.create_table(
        "morphology_feature_annotation",
        sa.Column("reconstruction_morphology_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "creation_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "update_date",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["reconstruction_morphology_id"],
            ["reconstruction_morphology.id"],
            name="fk_morphology_feature_annotation_reconstruction_morphol_795e",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_morphology_feature_annotation"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_morphology_feature_annotation_reconstruction_morphology_id",
        "morphology_feature_annotation",
        ["reconstruction_morphology_id"],
        unique=True,
    )
    op.create_index(
        "ix_morphology_feature_annotation_creation_date",
        "morphology_feature_annotation",
        ["creation_date"],
        unique=False,
    )
    op.create_table(
        "measurement",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("measurement_of", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "morphology_feature_annotation_id", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["morphology_feature_annotation_id"],
            ["morphology_feature_annotation.id"],
            name="fk_measurement_morphology_feature_annotation_id_morphol_93f8",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_measurement"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        "ix_measurement_morphology_feature_annotation_id",
        "measurement",
        ["morphology_feature_annotation_id"],
        unique=False,
    )
    op.create_index(
        "ix_measurement_measurement_of", "measurement", ["measurement_of"], unique=False
    )
    op.create_table(
        "measurement_serie_element",
        sa.Column(
            "id",
            sa.BIGINT(),
            sa.Identity(
                always=False,
                start=1,
                increment=1,
                minvalue=1,
                maxvalue=9223372036854775807,
                cycle=False,
                cache=1,
            ),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("value", sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
        sa.Column("measurement_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["measurement_id"],
            ["measurement.id"],
            name="fk_measurement_serie_element_measurement_id_measurement",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_measurement_serie_element"),
    )
    op.create_index(
        "ix_measurement_serie_element_measurement_id",
        "measurement_serie_element",
        ["measurement_id"],
        unique=False,
    )
    op.drop_index(op.f("ix_measurement_item_measurement_kind_id"), table_name="measurement_item")
    op.drop_table("measurement_item")
    op.drop_index(op.f("ix_measurement_kind_pref_label"), table_name="measurement_kind")
    op.drop_index(
        op.f("ix_measurement_kind_measurement_annotation_id"), table_name="measurement_kind"
    )
    op.drop_table("measurement_kind")
    op.drop_index(op.f("ix_measurement_annotation_legacy_id"), table_name="measurement_annotation")
    op.drop_index(op.f("ix_measurement_annotation_entity_id"), table_name="measurement_annotation")
    op.drop_index(
        op.f("ix_measurement_annotation_creation_date"), table_name="measurement_annotation"
    )
    op.drop_table("measurement_annotation")
    sa.Enum("apical_dendrite", "basal_dendrite", "axon", name="structuraldomain").drop(
        op.get_bind()
    )
    # ### end Alembic commands ###
