"""triggers

Revision ID: 077b4ad24943
Revises: 8648142f1ce7
Create Date: 2025-05-09 14:00:54.141930

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "077b4ad24943"
down_revision: Union[str, None] = "8648142f1ce7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_subject_subject_description_vector = PGTrigger(
        schema="public",
        signature="subject_description_vector",
        on_entity="public.subject",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON subject\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_subject_subject_description_vector)

    public_single_neuron_simulation_single_neuron_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_simulation_description_vector",
        on_entity="public.single_neuron_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_single_neuron_simulation_single_neuron_simulation_description_vector)

    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
    )

    public_ion_channel_model_ion_channel_model_description_vector = PGTrigger(
        schema="public",
        signature="ion_channel_model_description_vector",
        on_entity="public.ion_channel_model",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_model\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_ion_channel_model_ion_channel_model_description_vector)

    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
    )

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_emodel_emodel_description_vector)

    public_electrical_cell_recording_electrical_cell_recording_description_vector = PGTrigger(
        schema="public",
        signature="electrical_cell_recording_description_vector",
        on_entity="public.electrical_cell_recording",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON electrical_cell_recording\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_electrical_cell_recording_electrical_cell_recording_description_vector)

    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_memodel_memodel_description_vector)

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_mesh_mesh_description_vector)

    public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_simulation_description_vector",
        on_entity="public.single_neuron_synaptome_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector
    )

    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
    )
    op.create_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.create_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_emodel_id_emodel",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_emodel_id_emodel()",
    )
    op.drop_entity(public_memodel_unauthorized_private_reference_trigger_memodel_emodel_id_emodel)

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_reconstruction_morphology
    )

    public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
    )
    op.drop_entity(
        public_emodel_unauthorized_private_reference_trigger_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_memodel_emodel_id_emodel = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_emodel_id_emodel()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.emodel_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_unauthorized_private_reference_function_memodel_emodel_id_emodel)

    public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_reconstruction_morphology
    )

    public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.exemplar_morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_emodel_exemplar_morphology_id_reconstruction_morphology
    )

    public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector = PGTrigger(
        schema="public",
        signature="experimental_synapses_per_connection_description_vector",
        on_entity="public.experimental_synapses_per_connection",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_synapses_per_connection\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_synapses_per_connection_experimental_synapses_per_connection_description_vector
    )

    public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_simulation_description_vector",
        on_entity="public.single_neuron_synaptome_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_single_neuron_synaptome_simulation_single_neuron_synaptome_simulation_description_vector
    )

    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON mesh\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_mesh_mesh_description_vector)

    public_experimental_bouton_density_experimental_bouton_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_bouton_density_description_vector",
        on_entity="public.experimental_bouton_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_bouton_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_bouton_density_experimental_bouton_density_description_vector
    )

    public_single_neuron_synaptome_single_neuron_synaptome_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_synaptome_description_vector",
        on_entity="public.single_neuron_synaptome",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_synaptome\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_synaptome_single_neuron_synaptome_description_vector)

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON reconstruction_morphology\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_memodel_memodel_description_vector = PGTrigger(
        schema="public",
        signature="memodel_description_vector",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_memodel_memodel_description_vector)

    public_electrical_cell_recording_electrical_cell_recording_description_vector = PGTrigger(
        schema="public",
        signature="electrical_cell_recording_description_vector",
        on_entity="public.electrical_cell_recording",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON electrical_cell_recording\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_electrical_cell_recording_electrical_cell_recording_description_vector)

    public_emodel_emodel_description_vector = PGTrigger(
        schema="public",
        signature="emodel_description_vector",
        on_entity="public.emodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON emodel\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_emodel_emodel_description_vector)

    public_experimental_neuron_density_experimental_neuron_density_description_vector = PGTrigger(
        schema="public",
        signature="experimental_neuron_density_description_vector",
        on_entity="public.experimental_neuron_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON experimental_neuron_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_experimental_neuron_density_experimental_neuron_density_description_vector
    )

    public_ion_channel_model_ion_channel_model_description_vector = PGTrigger(
        schema="public",
        signature="ion_channel_model_description_vector",
        on_entity="public.ion_channel_model",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_model\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_ion_channel_model_ion_channel_model_description_vector)

    public_analysis_software_source_code_analysis_software_source_code_description_vector = PGTrigger(
        schema="public",
        signature="analysis_software_source_code_description_vector",
        on_entity="public.analysis_software_source_code",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON analysis_software_source_code\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_analysis_software_source_code_analysis_software_source_code_description_vector
    )

    public_single_neuron_simulation_single_neuron_simulation_description_vector = PGTrigger(
        schema="public",
        signature="single_neuron_simulation_description_vector",
        on_entity="public.single_neuron_simulation",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON single_neuron_simulation\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_single_neuron_simulation_single_neuron_simulation_description_vector)

    public_subject_subject_description_vector = PGTrigger(
        schema="public",
        signature="subject_description_vector",
        on_entity="public.subject",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON subject\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_subject_subject_description_vector)

    # ### end Alembic commands ###
