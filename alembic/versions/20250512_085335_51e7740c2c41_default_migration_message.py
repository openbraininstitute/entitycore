"""Default migration message

Revision ID: 51e7740c2c41
Revises: 077b4ad24943
Create Date: 2025-05-12 08:53:35.309085

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "51e7740c2c41"
down_revision: Union[str, None] = "077b4ad24943"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "brain_atlas",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_brain_atlas_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_brain_atlas_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_brain_atlas_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_brain_atlas_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_brain_atlas")),
    )
    op.create_index(
        op.f("ix_brain_atlas_brain_region_id"), "brain_atlas", ["brain_region_id"], unique=False
    )
    op.create_index(
        "ix_brain_atlas_description_vector",
        "brain_atlas",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_brain_atlas_name"), "brain_atlas", ["name"], unique=False)
    op.create_index(op.f("ix_brain_atlas_species_id"), "brain_atlas", ["species_id"], unique=False)
    op.create_index(op.f("ix_brain_atlas_strain_id"), "brain_atlas", ["strain_id"], unique=False)
    op.create_table(
        "cell_composition",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_cell_composition_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_cell_composition_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_cell_composition_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_cell_composition_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_cell_composition")),
    )
    op.create_index(
        op.f("ix_cell_composition_brain_region_id"),
        "cell_composition",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_cell_composition_description_vector",
        "cell_composition",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_cell_composition_name"), "cell_composition", ["name"], unique=False)
    op.create_index(
        op.f("ix_cell_composition_species_id"), "cell_composition", ["species_id"], unique=False
    )
    op.create_index(
        op.f("ix_cell_composition_strain_id"), "cell_composition", ["strain_id"], unique=False
    )
    op.create_table(
        "me_type_density",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_me_type_density_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_me_type_density_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_me_type_density_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_me_type_density_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_me_type_density")),
    )
    op.create_index(
        op.f("ix_me_type_density_brain_region_id"),
        "me_type_density",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_me_type_density_description_vector",
        "me_type_density",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_me_type_density_name"), "me_type_density", ["name"], unique=False)
    op.create_index(
        op.f("ix_me_type_density_species_id"), "me_type_density", ["species_id"], unique=False
    )
    op.create_index(
        op.f("ix_me_type_density_strain_id"), "me_type_density", ["strain_id"], unique=False
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "emodel",
            "cell_composition",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "memodel",
            "mesh",
            "me_type_density",
            "reconstruction_morphology",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "ion_channel_model",
            "subject",
            "synaptic_pathway",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="assetlabel",
        new_values=[
            "neurolucida",
            "swc",
            "hdf5",
            "cell_composition_summary",
            "cell_composition_volumes",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="asset", column_name="label")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="assetlabel",
        new_values=["neurolucida", "swc", "hdf5"],
        affected_columns=[
            TableReference(table_schema="public", table_name="asset", column_name="label")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "age",
            "analysis_software_source_code",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "memodel",
            "mesh",
            "reconstruction_morphology",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "ion_channel_model",
            "subject",
            "synaptic_pathway",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.drop_index(op.f("ix_me_type_density_strain_id"), table_name="me_type_density")
    op.drop_index(op.f("ix_me_type_density_species_id"), table_name="me_type_density")
    op.drop_index(op.f("ix_me_type_density_name"), table_name="me_type_density")
    op.drop_index(
        "ix_me_type_density_description_vector",
        table_name="me_type_density",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_me_type_density_brain_region_id"), table_name="me_type_density")
    op.drop_table("me_type_density")
    op.drop_index(op.f("ix_cell_composition_strain_id"), table_name="cell_composition")
    op.drop_index(op.f("ix_cell_composition_species_id"), table_name="cell_composition")
    op.drop_index(op.f("ix_cell_composition_name"), table_name="cell_composition")
    op.drop_index(
        "ix_cell_composition_description_vector",
        table_name="cell_composition",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_cell_composition_brain_region_id"), table_name="cell_composition")
    op.drop_table("cell_composition")
    op.drop_index(op.f("ix_brain_atlas_strain_id"), table_name="brain_atlas")
    op.drop_index(op.f("ix_brain_atlas_species_id"), table_name="brain_atlas")
    op.drop_index(op.f("ix_brain_atlas_name"), table_name="brain_atlas")
    op.drop_index(
        "ix_brain_atlas_description_vector", table_name="brain_atlas", postgresql_using="gin"
    )
    op.drop_index(op.f("ix_brain_atlas_brain_region_id"), table_name="brain_atlas")
    op.drop_table("brain_atlas")
    # ### end Alembic commands ###
