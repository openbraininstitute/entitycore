"""Default migration message

Revision ID: f85e99e71f78
Revises: 51e7740c2c41
Create Date: 2025-05-12 08:54:05.381143

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "f85e99e71f78"
down_revision: Union[str, None] = "51e7740c2c41"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_me_type_density_me_type_density_description_vector = PGTrigger(
        schema="public",
        signature="me_type_density_description_vector",
        on_entity="public.me_type_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON me_type_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_me_type_density_me_type_density_description_vector)

    public_cell_composition_cell_composition_description_vector = PGTrigger(
        schema="public",
        signature="cell_composition_description_vector",
        on_entity="public.cell_composition",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON cell_composition\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_cell_composition_cell_composition_description_vector)

    public_brain_atlas_brain_atlas_description_vector = PGTrigger(
        schema="public",
        signature="brain_atlas_description_vector",
        on_entity="public.brain_atlas",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON brain_atlas\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(public_brain_atlas_brain_atlas_description_vector)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_brain_atlas_brain_atlas_description_vector = PGTrigger(
        schema="public",
        signature="brain_atlas_description_vector",
        on_entity="public.brain_atlas",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON brain_atlas\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_brain_atlas_brain_atlas_description_vector)

    public_cell_composition_cell_composition_description_vector = PGTrigger(
        schema="public",
        signature="cell_composition_description_vector",
        on_entity="public.cell_composition",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON cell_composition\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_cell_composition_cell_composition_description_vector)

    public_me_type_density_me_type_density_description_vector = PGTrigger(
        schema="public",
        signature="me_type_density_description_vector",
        on_entity="public.me_type_density",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON me_type_density\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(public_me_type_density_me_type_density_description_vector)

    # ### end Alembic commands ###
