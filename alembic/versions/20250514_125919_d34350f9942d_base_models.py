"""base_models

Revision ID: d34350f9942d
Revises:
Create Date: 2025-05-14 12:59:19.143221

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "d34350f9942d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "neurolucida",
        "swc",
        "hdf5",
        "cell_composition_summary",
        "cell_composition_volumes",
        name="assetlabel",
    ).create(op.get_bind())
    sa.Enum("CREATED", "DELETED", name="assetstatus").create(op.get_bind())
    sa.Enum("started", "failure", "success", name="singleneuronsimulationstatus").create(
        op.get_bind()
    )
    sa.Enum("in_vivo", "in_vitro", "in_silico", "unknown", name="electricalrecordingorigin").create(
        op.get_bind()
    )
    sa.Enum(
        "intracellular", "extracellular", "both", "unknown", name="electricalrecordingtype"
    ).create(op.get_bind())
    sa.Enum(
        "cheops",
        "constant",
        "pulse",
        "step",
        "ramp",
        "noise",
        "sinusoidal",
        "other",
        "two_steps",
        "unknown",
        name="electricalrecordingstimulusshape",
    ).create(op.get_bind())
    sa.Enum(
        "voltage_clamp",
        "current_clamp",
        "conductance_clamp",
        "extracellular",
        "other",
        "unknown",
        name="electricalrecordingstimulustype",
    ).create(op.get_bind())
    sa.Enum(
        "dimensionless",
        "linear_density__1_um",
        "volume_density__1_mm3",
        "linear__um",
        "area__um2",
        "volume__mm3",
        "angle__radian",
        name="measurementunit",
    ).create(op.get_bind())
    sa.Enum(
        "mean",
        "median",
        "mode",
        "variance",
        "data_point",
        "sample_size",
        "standard_error",
        "standard_deviation",
        "raw",
        "minimum",
        "maximum",
        "sum",
        name="measurementstatistic",
    ).create(op.get_bind())
    sa.Enum(
        "apical_dendrite",
        "basal_dendrite",
        "axon",
        "soma",
        "neuron_morphology",
        name="structuraldomain",
    ).create(op.get_bind())
    sa.Enum(
        "created", "initialized", "running", "done", "error", name="me_model_validation_status"
    ).create(op.get_bind())
    sa.Enum("male", "female", "unknown", name="sex").create(op.get_bind())
    sa.Enum("prenatal", "postnatal", "unknown", name="ageperiod").create(op.get_bind())
    sa.Enum(
        "analysis_software_source_code",
        "brain_atlas",
        "emodel",
        "cell_composition",
        "experimental_bouton_density",
        "experimental_neuron_density",
        "experimental_synapses_per_connection",
        "memodel",
        "mesh",
        "me_type_density",
        "reconstruction_morphology",
        "electrical_cell_recording",
        "electrical_recording_stimulus",
        "single_neuron_simulation",
        "single_neuron_synaptome",
        "single_neuron_synaptome_simulation",
        "ion_channel_model",
        "subject",
        name="entitytype",
    ).create(op.get_bind())
    sa.Enum("datamaturity_annotation_body", name="annotationbodytype").create(op.get_bind())
    sa.Enum("person", "organization", name="agenttype").create(op.get_bind())
    op.create_table(
        "agent",
        sa.Column(
            "type",
            postgresql.ENUM("person", "organization", name="agenttype", create_type=False),
            nullable=False,
        ),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_agent")),
    )
    op.create_index(op.f("ix_agent_creation_date"), "agent", ["creation_date"], unique=False)
    op.create_index(op.f("ix_agent_legacy_id"), "agent", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_agent_pref_label"), "agent", ["pref_label"], unique=True)
    op.create_table(
        "annotation_body",
        sa.Column(
            "type",
            postgresql.ENUM(
                "datamaturity_annotation_body", name="annotationbodytype", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation_body")),
    )
    op.create_index(
        op.f("ix_annotation_body_creation_date"), "annotation_body", ["creation_date"], unique=False
    )
    op.create_index(
        op.f("ix_annotation_body_legacy_id"), "annotation_body", ["legacy_id"], unique=False
    )
    op.create_table(
        "brain_region_hierarchy",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_brain_region_hierarchy")),
    )
    op.create_index(
        op.f("ix_brain_region_hierarchy_creation_date"),
        "brain_region_hierarchy",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_brain_region_hierarchy_name"), "brain_region_hierarchy", ["name"], unique=True
    )
    op.create_table(
        "etype_class",
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=False),
        sa.Column("alt_label", sa.String(), nullable=True),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_etype_class")),
    )
    op.create_index(
        op.f("ix_etype_class_creation_date"), "etype_class", ["creation_date"], unique=False
    )
    op.create_index(op.f("ix_etype_class_legacy_id"), "etype_class", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_etype_class_pref_label"), "etype_class", ["pref_label"], unique=True)
    op.create_table(
        "ion",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("ontology_id", sa.String(), nullable=True),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion")),
    )
    op.create_index(op.f("ix_ion_creation_date"), "ion", ["creation_date"], unique=False)
    op.create_index(op.f("ix_ion_name"), "ion", ["name"], unique=True)
    op.create_index(op.f("ix_ion_ontology_id"), "ion", ["ontology_id"], unique=True)
    op.create_table(
        "license",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_license")),
    )
    op.create_index(op.f("ix_license_creation_date"), "license", ["creation_date"], unique=False)
    op.create_index(op.f("ix_license_legacy_id"), "license", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_license_name"), "license", ["name"], unique=True)
    op.create_table(
        "mtype_class",
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column("definition", sa.String(), nullable=False),
        sa.Column("alt_label", sa.String(), nullable=True),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mtype_class")),
    )
    op.create_index(
        op.f("ix_mtype_class_creation_date"), "mtype_class", ["creation_date"], unique=False
    )
    op.create_index(op.f("ix_mtype_class_legacy_id"), "mtype_class", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_mtype_class_pref_label"), "mtype_class", ["pref_label"], unique=True)
    op.create_table(
        "role",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("role_id", sa.String(), nullable=False),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_role")),
    )
    op.create_index(op.f("ix_role_creation_date"), "role", ["creation_date"], unique=False)
    op.create_index(op.f("ix_role_legacy_id"), "role", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_role_name"), "role", ["name"], unique=True)
    op.create_index(op.f("ix_role_role_id"), "role", ["role_id"], unique=True)
    op.create_table(
        "species",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("taxonomy_id", sa.String(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_species")),
    )
    op.create_index(op.f("ix_species_creation_date"), "species", ["creation_date"], unique=False)
    op.create_index(op.f("ix_species_name"), "species", ["name"], unique=True)
    op.create_index(op.f("ix_species_taxonomy_id"), "species", ["taxonomy_id"], unique=True)
    op.create_table(
        "brain_region",
        sa.Column("annotation_value", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("acronym", sa.String(), nullable=False),
        sa.Column("color_hex_triplet", sa.String(length=6), nullable=False),
        sa.Column("parent_structure_id", sa.Uuid(), nullable=True),
        sa.Column("hierarchy_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["hierarchy_id"],
            ["brain_region_hierarchy.id"],
            name=op.f("fk_brain_region_hierarchy_id_brain_region_hierarchy"),
        ),
        sa.ForeignKeyConstraint(
            ["parent_structure_id"],
            ["brain_region.id"],
            name=op.f("fk_brain_region_parent_structure_id_brain_region"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_brain_region")),
    )
    op.create_index(op.f("ix_brain_region_acronym"), "brain_region", ["acronym"], unique=False)
    op.create_index(
        op.f("ix_brain_region_annotation_value"), "brain_region", ["annotation_value"], unique=False
    )
    op.create_index(
        op.f("ix_brain_region_creation_date"), "brain_region", ["creation_date"], unique=False
    )
    op.create_index(
        op.f("ix_brain_region_hierarchy_id"), "brain_region", ["hierarchy_id"], unique=False
    )
    op.create_index(op.f("ix_brain_region_name"), "brain_region", ["name"], unique=False)
    op.create_index(
        op.f("ix_brain_region_parent_structure_id"),
        "brain_region",
        ["parent_structure_id"],
        unique=False,
    )
    op.create_table(
        "datamaturity_annotation_body",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["annotation_body.id"],
            name=op.f("fk_datamaturity_annotation_body_id_annotation_body"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_datamaturity_annotation_body")),
    )
    op.create_index(
        op.f("ix_datamaturity_annotation_body_pref_label"),
        "datamaturity_annotation_body",
        ["pref_label"],
        unique=True,
    )
    op.create_table(
        "entity",
        sa.Column(
            "type",
            postgresql.ENUM(
                "analysis_software_source_code",
                "brain_atlas",
                "emodel",
                "cell_composition",
                "experimental_bouton_density",
                "experimental_neuron_density",
                "experimental_synapses_per_connection",
                "memodel",
                "mesh",
                "me_type_density",
                "reconstruction_morphology",
                "electrical_cell_recording",
                "electrical_recording_stimulus",
                "single_neuron_simulation",
                "single_neuron_synaptome",
                "single_neuron_synaptome_simulation",
                "ion_channel_model",
                "subject",
                name="entitytype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("createdBy_id", sa.Uuid(), nullable=True),
        sa.Column("updatedBy_id", sa.Uuid(), nullable=True),
        sa.Column("authorized_project_id", sa.Uuid(), nullable=False),
        sa.Column("authorized_public", sa.Boolean(), nullable=False),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["createdBy_id"], ["agent.id"], name=op.f("fk_entity_createdBy_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["updatedBy_id"], ["agent.id"], name=op.f("fk_entity_updatedBy_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_entity")),
    )
    op.create_index(op.f("ix_entity_createdBy_id"), "entity", ["createdBy_id"], unique=False)
    op.create_index(op.f("ix_entity_creation_date"), "entity", ["creation_date"], unique=False)
    op.create_index(op.f("ix_entity_legacy_id"), "entity", ["legacy_id"], unique=False)
    op.create_index(op.f("ix_entity_updatedBy_id"), "entity", ["updatedBy_id"], unique=False)
    op.create_table(
        "organization",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("alternative_name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["agent.id"], name=op.f("fk_organization_id_agent")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_organization")),
    )
    op.create_table(
        "person",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("givenName", sa.String(), nullable=False),
        sa.Column("familyName", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["agent.id"], name=op.f("fk_person_id_agent")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_person")),
        sa.UniqueConstraint("givenName", "familyName", name="unique_person_name_1"),
    )
    op.create_table(
        "strain",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("taxonomy_id", sa.String(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_strain_species_id_species")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_strain")),
        sa.UniqueConstraint("id", "species_id", name="uq_strain_id_species_id"),
    )
    op.create_index(op.f("ix_strain_creation_date"), "strain", ["creation_date"], unique=False)
    op.create_index(op.f("ix_strain_name"), "strain", ["name"], unique=True)
    op.create_index(op.f("ix_strain_species_id"), "strain", ["species_id"], unique=False)
    op.create_index(op.f("ix_strain_taxonomy_id"), "strain", ["taxonomy_id"], unique=True)
    op.create_table(
        "analysis_software_source_code",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("branch", sa.String(), nullable=False),
        sa.Column("codeRepository", sa.String(), nullable=False),
        sa.Column("command", sa.String(), nullable=False),
        sa.Column("commit", sa.String(), nullable=False),
        sa.Column("subdirectory", sa.String(), nullable=False),
        sa.Column("targetEntity", sa.String(), nullable=False),
        sa.Column("programmingLanguage", sa.String(), nullable=False),
        sa.Column("runtimePlatform", sa.String(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_analysis_software_source_code_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_analysis_software_source_code")),
    )
    op.create_index(
        "ix_analysis_software_source_code_description_vector",
        "analysis_software_source_code",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_analysis_software_source_code_name"),
        "analysis_software_source_code",
        ["name"],
        unique=False,
    )
    op.create_table(
        "annotation",
        sa.Column("note", sa.String(), nullable=True),
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column("annotation_body_id", sa.Uuid(), nullable=False),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["annotation_body_id"],
            ["annotation_body.id"],
            name=op.f("fk_annotation_annotation_body_id_annotation_body"),
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_annotation_entity_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_annotation")),
    )
    op.create_index(
        op.f("ix_annotation_annotation_body_id"), "annotation", ["annotation_body_id"], unique=False
    )
    op.create_index(
        op.f("ix_annotation_creation_date"), "annotation", ["creation_date"], unique=False
    )
    op.create_index(op.f("ix_annotation_entity_id"), "annotation", ["entity_id"], unique=False)
    op.create_index(op.f("ix_annotation_legacy_id"), "annotation", ["legacy_id"], unique=False)
    op.create_table(
        "asset",
        sa.Column(
            "status",
            postgresql.ENUM("CREATED", "DELETED", name="assetstatus", create_type=False),
            nullable=False,
        ),
        sa.Column("path", sa.String(), nullable=False),
        sa.Column("full_path", sa.String(), nullable=False),
        sa.Column("is_directory", sa.Boolean(), nullable=False),
        sa.Column("content_type", sa.String(), nullable=False),
        sa.Column("size", sa.BigInteger(), nullable=False),
        sa.Column("sha256_digest", sa.LargeBinary(length=32), nullable=True),
        sa.Column("meta", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column(
            "label",
            postgresql.ENUM(
                "neurolucida",
                "swc",
                "hdf5",
                "cell_composition_summary",
                "cell_composition_volumes",
                name="assetlabel",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_asset_entity_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_asset")),
    )
    op.create_index(op.f("ix_asset_creation_date"), "asset", ["creation_date"], unique=False)
    op.create_index(op.f("ix_asset_entity_id"), "asset", ["entity_id"], unique=False)
    op.create_index(
        "ix_asset_full_path",
        "asset",
        ["full_path"],
        unique=True,
        postgresql_where=sa.text("status != 'DELETED'"),
    )
    op.create_table(
        "brain_atlas",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_brain_atlas_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_brain_atlas_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_brain_atlas_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_brain_atlas_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_brain_atlas")),
    )
    op.create_index(
        op.f("ix_brain_atlas_brain_region_id"), "brain_atlas", ["brain_region_id"], unique=False
    )
    op.create_index(
        "ix_brain_atlas_description_vector",
        "brain_atlas",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_brain_atlas_name"), "brain_atlas", ["name"], unique=False)
    op.create_index(op.f("ix_brain_atlas_species_id"), "brain_atlas", ["species_id"], unique=False)
    op.create_index(op.f("ix_brain_atlas_strain_id"), "brain_atlas", ["strain_id"], unique=False)
    op.create_table(
        "cell_composition",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_cell_composition_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_cell_composition_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_cell_composition_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_cell_composition_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_cell_composition")),
    )
    op.create_index(
        op.f("ix_cell_composition_brain_region_id"),
        "cell_composition",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_cell_composition_description_vector",
        "cell_composition",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_cell_composition_name"), "cell_composition", ["name"], unique=False)
    op.create_index(
        op.f("ix_cell_composition_species_id"), "cell_composition", ["species_id"], unique=False
    )
    op.create_index(
        op.f("ix_cell_composition_strain_id"), "cell_composition", ["strain_id"], unique=False
    )
    op.create_table(
        "contribution",
        sa.Column("agent_id", sa.Uuid(), nullable=False),
        sa.Column("role_id", sa.Uuid(), nullable=False),
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["agent_id"], ["agent.id"], name=op.f("fk_contribution_agent_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_contribution_entity_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.id"], name=op.f("fk_contribution_role_id_role")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_contribution")),
        sa.UniqueConstraint("entity_id", "role_id", "agent_id", name="unique_contribution_1"),
    )
    op.create_index(op.f("ix_contribution_agent_id"), "contribution", ["agent_id"], unique=False)
    op.create_index(
        op.f("ix_contribution_creation_date"), "contribution", ["creation_date"], unique=False
    )
    op.create_index(op.f("ix_contribution_entity_id"), "contribution", ["entity_id"], unique=False)
    op.create_index(op.f("ix_contribution_role_id"), "contribution", ["role_id"], unique=False)
    op.create_table(
        "etype_classification",
        sa.Column("etype_class_id", sa.Uuid(), nullable=False),
        sa.Column("createdBy_id", sa.Uuid(), nullable=True),
        sa.Column("updatedBy_id", sa.Uuid(), nullable=True),
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["createdBy_id"], ["agent.id"], name=op.f("fk_etype_classification_createdBy_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_etype_classification_entity_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["etype_class_id"],
            ["etype_class.id"],
            name=op.f("fk_etype_classification_etype_class_id_etype_class"),
        ),
        sa.ForeignKeyConstraint(
            ["updatedBy_id"], ["agent.id"], name=op.f("fk_etype_classification_updatedBy_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_etype_classification")),
    )
    op.create_index(
        op.f("ix_etype_classification_createdBy_id"),
        "etype_classification",
        ["createdBy_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_creation_date"),
        "etype_classification",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_entity_id"),
        "etype_classification",
        ["entity_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_etype_class_id"),
        "etype_classification",
        ["etype_class_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_etype_classification_updatedBy_id"),
        "etype_classification",
        ["updatedBy_id"],
        unique=False,
    )
    op.create_table(
        "ion_channel_model",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("is_ljp_corrected", sa.Boolean(), nullable=False),
        sa.Column("is_temperature_dependent", sa.Boolean(), nullable=False),
        sa.Column("temperature_celsius", sa.Integer(), nullable=False),
        sa.Column("is_stochastic", sa.Boolean(), nullable=False),
        sa.Column("nmodl_suffix", sa.String(), nullable=False),
        sa.Column("neuron_block", postgresql.JSONB(astext_type=sa.Text()), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_ion_channel_model_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_ion_channel_model_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_ion_channel_model_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_ion_channel_model_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel_model")),
    )
    op.create_index(
        op.f("ix_ion_channel_model_brain_region_id"),
        "ion_channel_model",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_ion_channel_model_description_vector",
        "ion_channel_model",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_ion_channel_model_name"), "ion_channel_model", ["name"], unique=False)
    op.create_index(
        op.f("ix_ion_channel_model_species_id"), "ion_channel_model", ["species_id"], unique=False
    )
    op.create_index(
        op.f("ix_ion_channel_model_strain_id"), "ion_channel_model", ["strain_id"], unique=False
    )
    op.create_table(
        "me_type_density",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_me_type_density_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_me_type_density_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_me_type_density_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_me_type_density_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_me_type_density")),
    )
    op.create_index(
        op.f("ix_me_type_density_brain_region_id"),
        "me_type_density",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_me_type_density_description_vector",
        "me_type_density",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_me_type_density_name"), "me_type_density", ["name"], unique=False)
    op.create_index(
        op.f("ix_me_type_density_species_id"), "me_type_density", ["species_id"], unique=False
    )
    op.create_index(
        op.f("ix_me_type_density_strain_id"), "me_type_density", ["strain_id"], unique=False
    )
    op.create_table(
        "measurement_annotation",
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column("legacy_id", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("legacy_self", sa.ARRAY(sa.VARCHAR()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_measurement_annotation_entity_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_annotation")),
    )
    op.create_index(
        op.f("ix_measurement_annotation_creation_date"),
        "measurement_annotation",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_measurement_annotation_entity_id"),
        "measurement_annotation",
        ["entity_id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_measurement_annotation_legacy_id"),
        "measurement_annotation",
        ["legacy_id"],
        unique=False,
    )
    op.create_table(
        "measurement_record",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column(
            "name",
            postgresql.ENUM(
                "mean",
                "median",
                "mode",
                "variance",
                "data_point",
                "sample_size",
                "standard_error",
                "standard_deviation",
                "raw",
                "minimum",
                "maximum",
                "sum",
                name="measurementstatistic",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "unit",
            postgresql.ENUM(
                "dimensionless",
                "linear_density__1_um",
                "volume_density__1_mm3",
                "linear__um",
                "area__um2",
                "volume__mm3",
                "angle__radian",
                name="measurementunit",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_measurement_record_entity_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_record")),
    )
    op.create_index(
        op.f("ix_measurement_record_entity_id"), "measurement_record", ["entity_id"], unique=False
    )
    op.create_table(
        "mesh",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_mesh_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_mesh_id_entity")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mesh")),
    )
    op.create_index(op.f("ix_mesh_brain_region_id"), "mesh", ["brain_region_id"], unique=False)
    op.create_index(
        "ix_mesh_description_vector",
        "mesh",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_mesh_name"), "mesh", ["name"], unique=False)
    op.create_table(
        "mtype_classification",
        sa.Column("mtype_class_id", sa.Uuid(), nullable=False),
        sa.Column("createdBy_id", sa.Uuid(), nullable=True),
        sa.Column("updatedBy_id", sa.Uuid(), nullable=True),
        sa.Column("entity_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["createdBy_id"], ["agent.id"], name=op.f("fk_mtype_classification_createdBy_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["entity_id"], ["entity.id"], name=op.f("fk_mtype_classification_entity_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["mtype_class_id"],
            ["mtype_class.id"],
            name=op.f("fk_mtype_classification_mtype_class_id_mtype_class"),
        ),
        sa.ForeignKeyConstraint(
            ["updatedBy_id"], ["agent.id"], name=op.f("fk_mtype_classification_updatedBy_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_mtype_classification")),
    )
    op.create_index(
        op.f("ix_mtype_classification_createdBy_id"),
        "mtype_classification",
        ["createdBy_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_creation_date"),
        "mtype_classification",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_entity_id"),
        "mtype_classification",
        ["entity_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_mtype_class_id"),
        "mtype_classification",
        ["mtype_class_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_mtype_classification_updatedBy_id"),
        "mtype_classification",
        ["updatedBy_id"],
        unique=False,
    )
    op.create_table(
        "reconstruction_morphology",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("location", app.db.types.PointLocationType(astext_type=Text()), nullable=True),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_reconstruction_morphology_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_reconstruction_morphology_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_reconstruction_morphology_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk_reconstruction_morphology_species_id_species"),
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_reconstruction_morphology_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reconstruction_morphology")),
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_brain_region_id"),
        "reconstruction_morphology",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_reconstruction_morphology_description_vector",
        "reconstruction_morphology",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_license_id"),
        "reconstruction_morphology",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_name"),
        "reconstruction_morphology",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_species_id"),
        "reconstruction_morphology",
        ["species_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_strain_id"),
        "reconstruction_morphology",
        ["strain_id"],
        unique=False,
    )
    op.create_table(
        "subject",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("age_value", sa.Interval(), nullable=True),
        sa.Column("age_min", sa.Interval(), nullable=True),
        sa.Column("age_max", sa.Interval(), nullable=True),
        sa.Column(
            "age_period",
            postgresql.ENUM(
                "prenatal", "postnatal", "unknown", name="ageperiod", create_type=False
            ),
            nullable=True,
        ),
        sa.Column(
            "sex",
            postgresql.ENUM("male", "female", "unknown", name="sex", create_type=False),
            nullable=True,
        ),
        sa.Column("weight", sa.Float(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_subject_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_subject_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_subject_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subject")),
    )
    op.create_index(
        "ix_subject_description_vector",
        "subject",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_subject_name"), "subject", ["name"], unique=False)
    op.create_index(op.f("ix_subject_species_id"), "subject", ["species_id"], unique=False)
    op.create_index(op.f("ix_subject_strain_id"), "subject", ["strain_id"], unique=False)
    op.create_table(
        "electrical_cell_recording",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "recording_type",
            postgresql.ENUM(
                "intracellular",
                "extracellular",
                "both",
                "unknown",
                name="electricalrecordingtype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "recording_origin",
            postgresql.ENUM(
                "in_vivo",
                "in_vitro",
                "in_silico",
                "unknown",
                name="electricalrecordingorigin",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("recording_location", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column("ljp", sa.Float(), nullable=False),
        sa.Column("comment", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("subject_id", sa.Uuid(), nullable=True),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_electrical_cell_recording_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_electrical_cell_recording_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_electrical_cell_recording_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
            name=op.f("fk_electrical_cell_recording_subject_id_subject"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_electrical_cell_recording")),
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_brain_region_id"),
        "electrical_cell_recording",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_electrical_cell_recording_description_vector",
        "electrical_cell_recording",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_license_id"),
        "electrical_cell_recording",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_name"),
        "electrical_cell_recording",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_electrical_cell_recording_subject_id"),
        "electrical_cell_recording",
        ["subject_id"],
        unique=False,
    )
    op.create_table(
        "emodel",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("eModel", sa.String(), nullable=False),
        sa.Column("eType", sa.String(), nullable=False),
        sa.Column("iteration", sa.String(), nullable=False),
        sa.Column("score", sa.Float(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("exemplar_morphology_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_emodel_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["exemplar_morphology_id"],
            ["reconstruction_morphology.id"],
            name=op.f("fk_emodel_exemplar_morphology_id_reconstruction_morphology"),
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_emodel_id_entity")),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_emodel_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_emodel_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_emodel")),
    )
    op.create_index(op.f("ix_emodel_brain_region_id"), "emodel", ["brain_region_id"], unique=False)
    op.create_index(
        "ix_emodel_description_vector",
        "emodel",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_emodel_name"), "emodel", ["name"], unique=False)
    op.create_index(op.f("ix_emodel_species_id"), "emodel", ["species_id"], unique=False)
    op.create_index(op.f("ix_emodel_strain_id"), "emodel", ["strain_id"], unique=False)
    op.create_table(
        "experimental_bouton_density",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.Column("subject_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_bouton_density_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_experimental_bouton_density_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_experimental_bouton_density_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
            name=op.f("fk_experimental_bouton_density_subject_id_subject"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experimental_bouton_density")),
    )
    op.create_index(
        op.f("ix_experimental_bouton_density_brain_region_id"),
        "experimental_bouton_density",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_experimental_bouton_density_description_vector",
        "experimental_bouton_density",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_experimental_bouton_density_license_id"),
        "experimental_bouton_density",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_bouton_density_name"),
        "experimental_bouton_density",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_bouton_density_subject_id"),
        "experimental_bouton_density",
        ["subject_id"],
        unique=False,
    )
    op.create_table(
        "experimental_neuron_density",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("subject_id", sa.Uuid(), nullable=True),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_neuron_density_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_experimental_neuron_density_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_experimental_neuron_density_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
            name=op.f("fk_experimental_neuron_density_subject_id_subject"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experimental_neuron_density")),
    )
    op.create_index(
        op.f("ix_experimental_neuron_density_brain_region_id"),
        "experimental_neuron_density",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_experimental_neuron_density_description_vector",
        "experimental_neuron_density",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_experimental_neuron_density_license_id"),
        "experimental_neuron_density",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_neuron_density_name"),
        "experimental_neuron_density",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_neuron_density_subject_id"),
        "experimental_neuron_density",
        ["subject_id"],
        unique=False,
    )
    op.create_table(
        "experimental_synapses_per_connection",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("pre_mtype_id", sa.Uuid(), nullable=False),
        sa.Column("post_mtype_id", sa.Uuid(), nullable=False),
        sa.Column("pre_region_id", sa.Uuid(), nullable=False),
        sa.Column("post_region_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("subject_id", sa.Uuid(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_synapses_per_connection_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_experimental_synapses_per_connection_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_experimental_synapses_per_connection_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["post_mtype_id"],
            ["mtype_class.id"],
            name=op.f("fk_experimental_synapses_per_connection_post_mtype_id_mtype_class"),
        ),
        sa.ForeignKeyConstraint(
            ["post_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_synapses_per_connection_post_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["pre_mtype_id"],
            ["mtype_class.id"],
            name=op.f("fk_experimental_synapses_per_connection_pre_mtype_id_mtype_class"),
        ),
        sa.ForeignKeyConstraint(
            ["pre_region_id"],
            ["brain_region.id"],
            name=op.f("fk_experimental_synapses_per_connection_pre_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"],
            ["subject.id"],
            name=op.f("fk_experimental_synapses_per_connection_subject_id_subject"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_experimental_synapses_per_connection")),
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_brain_region_id"),
        "experimental_synapses_per_connection",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_experimental_synapses_per_connection_description_vector",
        "experimental_synapses_per_connection",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_license_id"),
        "experimental_synapses_per_connection",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_name"),
        "experimental_synapses_per_connection",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_post_mtype_id"),
        "experimental_synapses_per_connection",
        ["post_mtype_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_post_region_id"),
        "experimental_synapses_per_connection",
        ["post_region_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_pre_mtype_id"),
        "experimental_synapses_per_connection",
        ["pre_mtype_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_pre_region_id"),
        "experimental_synapses_per_connection",
        ["pre_region_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_experimental_synapses_per_connection_subject_id"),
        "experimental_synapses_per_connection",
        ["subject_id"],
        unique=False,
    )
    op.create_table(
        "measurement_kind",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column("pref_label", sa.String(), nullable=False),
        sa.Column(
            "structural_domain",
            postgresql.ENUM(
                "apical_dendrite",
                "basal_dendrite",
                "axon",
                "soma",
                "neuron_morphology",
                name="structuraldomain",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("measurement_annotation_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["measurement_annotation_id"],
            ["measurement_annotation.id"],
            name=op.f("fk_measurement_kind_measurement_annotation_id_measurement_annotation"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_kind")),
        sa.UniqueConstraint(
            "measurement_annotation_id",
            "pref_label",
            "structural_domain",
            name="uq_measurement_kind_measurement_annotation_id",
            postgresql_nulls_not_distinct=True,
        ),
    )
    op.create_index(
        op.f("ix_measurement_kind_measurement_annotation_id"),
        "measurement_kind",
        ["measurement_annotation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_measurement_kind_pref_label"), "measurement_kind", ["pref_label"], unique=False
    )
    op.create_table(
        "electrical_recording_stimulus",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("dt", sa.Float(), nullable=True),
        sa.Column(
            "injection_type",
            postgresql.ENUM(
                "voltage_clamp",
                "current_clamp",
                "conductance_clamp",
                "extracellular",
                "other",
                "unknown",
                name="electricalrecordingstimulustype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "shape",
            postgresql.ENUM(
                "cheops",
                "constant",
                "pulse",
                "step",
                "ramp",
                "noise",
                "sinusoidal",
                "other",
                "two_steps",
                "unknown",
                name="electricalrecordingstimulusshape",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("start_time", sa.Float(), nullable=True),
        sa.Column("end_time", sa.Float(), nullable=True),
        sa.Column("recording_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_electrical_recording_stimulus_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["recording_id"],
            ["electrical_cell_recording.id"],
            name=op.f("fk_electrical_recording_stimulus_recording_id_electrical_cell_recording"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_electrical_recording_stimulus")),
    )
    op.create_index(
        op.f("ix_electrical_recording_stimulus_recording_id"),
        "electrical_recording_stimulus",
        ["recording_id"],
        unique=False,
    )
    op.create_table(
        "ion_channel_model__emodel",
        sa.Column("ion_channel_model_id", sa.Uuid(), nullable=False),
        sa.Column("emodel_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["emodel_id"],
            ["emodel.id"],
            name=op.f("fk_ion_channel_model__emodel_emodel_id_emodel"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["ion_channel_model_id"],
            ["ion_channel_model.id"],
            name=op.f("fk_ion_channel_model__emodel_ion_channel_model_id_ion_channel_model"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "ion_channel_model_id", "emodel_id", name=op.f("pk_ion_channel_model__emodel")
        ),
    )
    op.create_table(
        "measurement_item",
        sa.Column("id", sa.BigInteger(), sa.Identity(always=False), nullable=False),
        sa.Column(
            "name",
            postgresql.ENUM(
                "mean",
                "median",
                "mode",
                "variance",
                "data_point",
                "sample_size",
                "standard_error",
                "standard_deviation",
                "raw",
                "minimum",
                "maximum",
                "sum",
                name="measurementstatistic",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "unit",
            postgresql.ENUM(
                "dimensionless",
                "linear_density__1_um",
                "volume_density__1_mm3",
                "linear__um",
                "area__um2",
                "volume__mm3",
                "angle__radian",
                name="measurementunit",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("measurement_kind_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["measurement_kind_id"],
            ["measurement_kind.id"],
            name=op.f("fk_measurement_item_measurement_kind_id_measurement_kind"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_measurement_item")),
        sa.UniqueConstraint(
            "measurement_kind_id",
            "name",
            name="uq_measurement_item_measurement_kind_id",
            postgresql_nulls_not_distinct=True,
        ),
    )
    op.create_index(
        op.f("ix_measurement_item_measurement_kind_id"),
        "measurement_item",
        ["measurement_kind_id"],
        unique=False,
    )
    op.create_table(
        "memodel",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "validation_status",
            postgresql.ENUM(
                "created",
                "initialized",
                "running",
                "done",
                "error",
                name="me_model_validation_status",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("morphology_id", sa.Uuid(), nullable=False),
        sa.Column("emodel_id", sa.Uuid(), nullable=False),
        sa.Column("species_id", sa.Uuid(), nullable=False),
        sa.Column("strain_id", sa.Uuid(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_memodel_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["emodel_id"], ["emodel.id"], name=op.f("fk_memodel_emodel_id_emodel")
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_memodel_id_entity")),
        sa.ForeignKeyConstraint(
            ["morphology_id"],
            ["reconstruction_morphology.id"],
            name=op.f("fk_memodel_morphology_id_reconstruction_morphology"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"], ["species.id"], name=op.f("fk_memodel_species_id_species")
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name="fk_memodel_strain_id_species_id",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_memodel")),
    )
    op.create_index(
        op.f("ix_memodel_brain_region_id"), "memodel", ["brain_region_id"], unique=False
    )
    op.create_index(
        "ix_memodel_description_vector",
        "memodel",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_memodel_name"), "memodel", ["name"], unique=False)
    op.create_index(op.f("ix_memodel_species_id"), "memodel", ["species_id"], unique=False)
    op.create_index(op.f("ix_memodel_strain_id"), "memodel", ["strain_id"], unique=False)
    op.create_table(
        "single_neuron_simulation",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("injectionLocation", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column("recordingLocation", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "started",
                "failure",
                "success",
                name="singleneuronsimulationstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("me_model_id", sa.Uuid(), nullable=False),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_single_neuron_simulation_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_single_neuron_simulation_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["me_model_id"],
            ["memodel.id"],
            name=op.f("fk_single_neuron_simulation_me_model_id_memodel"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_single_neuron_simulation")),
    )
    op.create_index(
        op.f("ix_single_neuron_simulation_brain_region_id"),
        "single_neuron_simulation",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_neuron_simulation_description_vector",
        "single_neuron_simulation",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_single_neuron_simulation_me_model_id"),
        "single_neuron_simulation",
        ["me_model_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_single_neuron_simulation_name"), "single_neuron_simulation", ["name"], unique=False
    )
    op.create_table(
        "single_neuron_synaptome",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("me_model_id", sa.Uuid(), nullable=False),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_single_neuron_synaptome_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_single_neuron_synaptome_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["me_model_id"],
            ["memodel.id"],
            name=op.f("fk_single_neuron_synaptome_me_model_id_memodel"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_single_neuron_synaptome")),
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_brain_region_id"),
        "single_neuron_synaptome",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_neuron_synaptome_description_vector",
        "single_neuron_synaptome",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_me_model_id"),
        "single_neuron_synaptome",
        ["me_model_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_name"), "single_neuron_synaptome", ["name"], unique=False
    )
    op.create_table(
        "single_neuron_synaptome_simulation",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("seed", sa.Integer(), nullable=False),
        sa.Column("injectionLocation", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column("recordingLocation", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "started",
                "failure",
                "success",
                name="singleneuronsimulationstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("synaptome_id", sa.Uuid(), nullable=False),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_single_neuron_synaptome_simulation_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_single_neuron_synaptome_simulation_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["synaptome_id"],
            ["single_neuron_synaptome.id"],
            name=op.f("fk_single_neuron_synaptome_simulation_synaptome_id_single_neuron_synaptome"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_single_neuron_synaptome_simulation")),
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_simulation_brain_region_id"),
        "single_neuron_synaptome_simulation",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_single_neuron_synaptome_simulation_description_vector",
        "single_neuron_synaptome_simulation",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_simulation_name"),
        "single_neuron_synaptome_simulation",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_single_neuron_synaptome_simulation_synaptome_id"),
        "single_neuron_synaptome_simulation",
        ["synaptome_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_single_neuron_synaptome_simulation_synaptome_id"),
        table_name="single_neuron_synaptome_simulation",
    )
    op.drop_index(
        op.f("ix_single_neuron_synaptome_simulation_name"),
        table_name="single_neuron_synaptome_simulation",
    )
    op.drop_index(
        "ix_single_neuron_synaptome_simulation_description_vector",
        table_name="single_neuron_synaptome_simulation",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_single_neuron_synaptome_simulation_brain_region_id"),
        table_name="single_neuron_synaptome_simulation",
    )
    op.drop_table("single_neuron_synaptome_simulation")
    op.drop_index(op.f("ix_single_neuron_synaptome_name"), table_name="single_neuron_synaptome")
    op.drop_index(
        op.f("ix_single_neuron_synaptome_me_model_id"), table_name="single_neuron_synaptome"
    )
    op.drop_index(
        "ix_single_neuron_synaptome_description_vector",
        table_name="single_neuron_synaptome",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_single_neuron_synaptome_brain_region_id"), table_name="single_neuron_synaptome"
    )
    op.drop_table("single_neuron_synaptome")
    op.drop_index(op.f("ix_single_neuron_simulation_name"), table_name="single_neuron_simulation")
    op.drop_index(
        op.f("ix_single_neuron_simulation_me_model_id"), table_name="single_neuron_simulation"
    )
    op.drop_index(
        "ix_single_neuron_simulation_description_vector",
        table_name="single_neuron_simulation",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_single_neuron_simulation_brain_region_id"), table_name="single_neuron_simulation"
    )
    op.drop_table("single_neuron_simulation")
    op.drop_index(op.f("ix_memodel_strain_id"), table_name="memodel")
    op.drop_index(op.f("ix_memodel_species_id"), table_name="memodel")
    op.drop_index(op.f("ix_memodel_name"), table_name="memodel")
    op.drop_index("ix_memodel_description_vector", table_name="memodel", postgresql_using="gin")
    op.drop_index(op.f("ix_memodel_brain_region_id"), table_name="memodel")
    op.drop_table("memodel")
    op.drop_index(op.f("ix_measurement_item_measurement_kind_id"), table_name="measurement_item")
    op.drop_table("measurement_item")
    op.drop_table("ion_channel_model__emodel")
    op.drop_index(
        op.f("ix_electrical_recording_stimulus_recording_id"),
        table_name="electrical_recording_stimulus",
    )
    op.drop_table("electrical_recording_stimulus")
    op.drop_index(op.f("ix_measurement_kind_pref_label"), table_name="measurement_kind")
    op.drop_index(
        op.f("ix_measurement_kind_measurement_annotation_id"), table_name="measurement_kind"
    )
    op.drop_table("measurement_kind")
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_subject_id"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_pre_region_id"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_pre_mtype_id"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_post_region_id"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_post_mtype_id"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_name"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_license_id"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_index(
        "ix_experimental_synapses_per_connection_description_vector",
        table_name="experimental_synapses_per_connection",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_experimental_synapses_per_connection_brain_region_id"),
        table_name="experimental_synapses_per_connection",
    )
    op.drop_table("experimental_synapses_per_connection")
    op.drop_index(
        op.f("ix_experimental_neuron_density_subject_id"), table_name="experimental_neuron_density"
    )
    op.drop_index(
        op.f("ix_experimental_neuron_density_name"), table_name="experimental_neuron_density"
    )
    op.drop_index(
        op.f("ix_experimental_neuron_density_license_id"), table_name="experimental_neuron_density"
    )
    op.drop_index(
        "ix_experimental_neuron_density_description_vector",
        table_name="experimental_neuron_density",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_experimental_neuron_density_brain_region_id"),
        table_name="experimental_neuron_density",
    )
    op.drop_table("experimental_neuron_density")
    op.drop_index(
        op.f("ix_experimental_bouton_density_subject_id"), table_name="experimental_bouton_density"
    )
    op.drop_index(
        op.f("ix_experimental_bouton_density_name"), table_name="experimental_bouton_density"
    )
    op.drop_index(
        op.f("ix_experimental_bouton_density_license_id"), table_name="experimental_bouton_density"
    )
    op.drop_index(
        "ix_experimental_bouton_density_description_vector",
        table_name="experimental_bouton_density",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_experimental_bouton_density_brain_region_id"),
        table_name="experimental_bouton_density",
    )
    op.drop_table("experimental_bouton_density")
    op.drop_index(op.f("ix_emodel_strain_id"), table_name="emodel")
    op.drop_index(op.f("ix_emodel_species_id"), table_name="emodel")
    op.drop_index(op.f("ix_emodel_name"), table_name="emodel")
    op.drop_index("ix_emodel_description_vector", table_name="emodel", postgresql_using="gin")
    op.drop_index(op.f("ix_emodel_brain_region_id"), table_name="emodel")
    op.drop_table("emodel")
    op.drop_index(
        op.f("ix_electrical_cell_recording_subject_id"), table_name="electrical_cell_recording"
    )
    op.drop_index(op.f("ix_electrical_cell_recording_name"), table_name="electrical_cell_recording")
    op.drop_index(
        op.f("ix_electrical_cell_recording_license_id"), table_name="electrical_cell_recording"
    )
    op.drop_index(
        "ix_electrical_cell_recording_description_vector",
        table_name="electrical_cell_recording",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_electrical_cell_recording_brain_region_id"), table_name="electrical_cell_recording"
    )
    op.drop_table("electrical_cell_recording")
    op.drop_index(op.f("ix_subject_strain_id"), table_name="subject")
    op.drop_index(op.f("ix_subject_species_id"), table_name="subject")
    op.drop_index(op.f("ix_subject_name"), table_name="subject")
    op.drop_index("ix_subject_description_vector", table_name="subject", postgresql_using="gin")
    op.drop_table("subject")
    op.drop_index(
        op.f("ix_reconstruction_morphology_strain_id"), table_name="reconstruction_morphology"
    )
    op.drop_index(
        op.f("ix_reconstruction_morphology_species_id"), table_name="reconstruction_morphology"
    )
    op.drop_index(op.f("ix_reconstruction_morphology_name"), table_name="reconstruction_morphology")
    op.drop_index(
        op.f("ix_reconstruction_morphology_license_id"), table_name="reconstruction_morphology"
    )
    op.drop_index(
        "ix_reconstruction_morphology_description_vector",
        table_name="reconstruction_morphology",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_reconstruction_morphology_brain_region_id"), table_name="reconstruction_morphology"
    )
    op.drop_table("reconstruction_morphology")
    op.drop_index(op.f("ix_mtype_classification_updatedBy_id"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_mtype_class_id"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_entity_id"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_creation_date"), table_name="mtype_classification")
    op.drop_index(op.f("ix_mtype_classification_createdBy_id"), table_name="mtype_classification")
    op.drop_table("mtype_classification")
    op.drop_index(op.f("ix_mesh_name"), table_name="mesh")
    op.drop_index("ix_mesh_description_vector", table_name="mesh", postgresql_using="gin")
    op.drop_index(op.f("ix_mesh_brain_region_id"), table_name="mesh")
    op.drop_table("mesh")
    op.drop_index(op.f("ix_measurement_record_entity_id"), table_name="measurement_record")
    op.drop_table("measurement_record")
    op.drop_index(op.f("ix_measurement_annotation_legacy_id"), table_name="measurement_annotation")
    op.drop_index(op.f("ix_measurement_annotation_entity_id"), table_name="measurement_annotation")
    op.drop_index(
        op.f("ix_measurement_annotation_creation_date"), table_name="measurement_annotation"
    )
    op.drop_table("measurement_annotation")
    op.drop_index(op.f("ix_me_type_density_strain_id"), table_name="me_type_density")
    op.drop_index(op.f("ix_me_type_density_species_id"), table_name="me_type_density")
    op.drop_index(op.f("ix_me_type_density_name"), table_name="me_type_density")
    op.drop_index(
        "ix_me_type_density_description_vector",
        table_name="me_type_density",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_me_type_density_brain_region_id"), table_name="me_type_density")
    op.drop_table("me_type_density")
    op.drop_index(op.f("ix_ion_channel_model_strain_id"), table_name="ion_channel_model")
    op.drop_index(op.f("ix_ion_channel_model_species_id"), table_name="ion_channel_model")
    op.drop_index(op.f("ix_ion_channel_model_name"), table_name="ion_channel_model")
    op.drop_index(
        "ix_ion_channel_model_description_vector",
        table_name="ion_channel_model",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_ion_channel_model_brain_region_id"), table_name="ion_channel_model")
    op.drop_table("ion_channel_model")
    op.drop_index(op.f("ix_etype_classification_updatedBy_id"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_etype_class_id"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_entity_id"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_creation_date"), table_name="etype_classification")
    op.drop_index(op.f("ix_etype_classification_createdBy_id"), table_name="etype_classification")
    op.drop_table("etype_classification")
    op.drop_index(op.f("ix_contribution_role_id"), table_name="contribution")
    op.drop_index(op.f("ix_contribution_entity_id"), table_name="contribution")
    op.drop_index(op.f("ix_contribution_creation_date"), table_name="contribution")
    op.drop_index(op.f("ix_contribution_agent_id"), table_name="contribution")
    op.drop_table("contribution")
    op.drop_index(op.f("ix_cell_composition_strain_id"), table_name="cell_composition")
    op.drop_index(op.f("ix_cell_composition_species_id"), table_name="cell_composition")
    op.drop_index(op.f("ix_cell_composition_name"), table_name="cell_composition")
    op.drop_index(
        "ix_cell_composition_description_vector",
        table_name="cell_composition",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_cell_composition_brain_region_id"), table_name="cell_composition")
    op.drop_table("cell_composition")
    op.drop_index(op.f("ix_brain_atlas_strain_id"), table_name="brain_atlas")
    op.drop_index(op.f("ix_brain_atlas_species_id"), table_name="brain_atlas")
    op.drop_index(op.f("ix_brain_atlas_name"), table_name="brain_atlas")
    op.drop_index(
        "ix_brain_atlas_description_vector", table_name="brain_atlas", postgresql_using="gin"
    )
    op.drop_index(op.f("ix_brain_atlas_brain_region_id"), table_name="brain_atlas")
    op.drop_table("brain_atlas")
    op.drop_index(
        "ix_asset_full_path", table_name="asset", postgresql_where=sa.text("status != 'DELETED'")
    )
    op.drop_index(op.f("ix_asset_entity_id"), table_name="asset")
    op.drop_index(op.f("ix_asset_creation_date"), table_name="asset")
    op.drop_table("asset")
    op.drop_index(op.f("ix_annotation_legacy_id"), table_name="annotation")
    op.drop_index(op.f("ix_annotation_entity_id"), table_name="annotation")
    op.drop_index(op.f("ix_annotation_creation_date"), table_name="annotation")
    op.drop_index(op.f("ix_annotation_annotation_body_id"), table_name="annotation")
    op.drop_table("annotation")
    op.drop_index(
        op.f("ix_analysis_software_source_code_name"), table_name="analysis_software_source_code"
    )
    op.drop_index(
        "ix_analysis_software_source_code_description_vector",
        table_name="analysis_software_source_code",
        postgresql_using="gin",
    )
    op.drop_table("analysis_software_source_code")
    op.drop_index(op.f("ix_strain_taxonomy_id"), table_name="strain")
    op.drop_index(op.f("ix_strain_species_id"), table_name="strain")
    op.drop_index(op.f("ix_strain_name"), table_name="strain")
    op.drop_index(op.f("ix_strain_creation_date"), table_name="strain")
    op.drop_table("strain")
    op.drop_table("person")
    op.drop_table("organization")
    op.drop_index(op.f("ix_entity_updatedBy_id"), table_name="entity")
    op.drop_index(op.f("ix_entity_legacy_id"), table_name="entity")
    op.drop_index(op.f("ix_entity_creation_date"), table_name="entity")
    op.drop_index(op.f("ix_entity_createdBy_id"), table_name="entity")
    op.drop_table("entity")
    op.drop_index(
        op.f("ix_datamaturity_annotation_body_pref_label"),
        table_name="datamaturity_annotation_body",
    )
    op.drop_table("datamaturity_annotation_body")
    op.drop_index(op.f("ix_brain_region_parent_structure_id"), table_name="brain_region")
    op.drop_index(op.f("ix_brain_region_name"), table_name="brain_region")
    op.drop_index(op.f("ix_brain_region_hierarchy_id"), table_name="brain_region")
    op.drop_index(op.f("ix_brain_region_creation_date"), table_name="brain_region")
    op.drop_index(op.f("ix_brain_region_annotation_value"), table_name="brain_region")
    op.drop_index(op.f("ix_brain_region_acronym"), table_name="brain_region")
    op.drop_table("brain_region")
    op.drop_index(op.f("ix_species_taxonomy_id"), table_name="species")
    op.drop_index(op.f("ix_species_name"), table_name="species")
    op.drop_index(op.f("ix_species_creation_date"), table_name="species")
    op.drop_table("species")
    op.drop_index(op.f("ix_role_role_id"), table_name="role")
    op.drop_index(op.f("ix_role_name"), table_name="role")
    op.drop_index(op.f("ix_role_legacy_id"), table_name="role")
    op.drop_index(op.f("ix_role_creation_date"), table_name="role")
    op.drop_table("role")
    op.drop_index(op.f("ix_mtype_class_pref_label"), table_name="mtype_class")
    op.drop_index(op.f("ix_mtype_class_legacy_id"), table_name="mtype_class")
    op.drop_index(op.f("ix_mtype_class_creation_date"), table_name="mtype_class")
    op.drop_table("mtype_class")
    op.drop_index(op.f("ix_license_name"), table_name="license")
    op.drop_index(op.f("ix_license_legacy_id"), table_name="license")
    op.drop_index(op.f("ix_license_creation_date"), table_name="license")
    op.drop_table("license")
    op.drop_index(op.f("ix_ion_ontology_id"), table_name="ion")
    op.drop_index(op.f("ix_ion_name"), table_name="ion")
    op.drop_index(op.f("ix_ion_creation_date"), table_name="ion")
    op.drop_table("ion")
    op.drop_index(op.f("ix_etype_class_pref_label"), table_name="etype_class")
    op.drop_index(op.f("ix_etype_class_legacy_id"), table_name="etype_class")
    op.drop_index(op.f("ix_etype_class_creation_date"), table_name="etype_class")
    op.drop_table("etype_class")
    op.drop_index(op.f("ix_brain_region_hierarchy_name"), table_name="brain_region_hierarchy")
    op.drop_index(
        op.f("ix_brain_region_hierarchy_creation_date"), table_name="brain_region_hierarchy"
    )
    op.drop_table("brain_region_hierarchy")
    op.drop_index(op.f("ix_annotation_body_legacy_id"), table_name="annotation_body")
    op.drop_index(op.f("ix_annotation_body_creation_date"), table_name="annotation_body")
    op.drop_table("annotation_body")
    op.drop_index(op.f("ix_agent_pref_label"), table_name="agent")
    op.drop_index(op.f("ix_agent_legacy_id"), table_name="agent")
    op.drop_index(op.f("ix_agent_creation_date"), table_name="agent")
    op.drop_table("agent")
    sa.Enum("person", "organization", name="agenttype").drop(op.get_bind())
    sa.Enum("datamaturity_annotation_body", name="annotationbodytype").drop(op.get_bind())
    sa.Enum(
        "analysis_software_source_code",
        "brain_atlas",
        "emodel",
        "cell_composition",
        "experimental_bouton_density",
        "experimental_neuron_density",
        "experimental_synapses_per_connection",
        "memodel",
        "mesh",
        "me_type_density",
        "reconstruction_morphology",
        "electrical_cell_recording",
        "electrical_recording_stimulus",
        "single_neuron_simulation",
        "single_neuron_synaptome",
        "single_neuron_synaptome_simulation",
        "ion_channel_model",
        "subject",
        name="entitytype",
    ).drop(op.get_bind())
    sa.Enum("prenatal", "postnatal", "unknown", name="ageperiod").drop(op.get_bind())
    sa.Enum("male", "female", "unknown", name="sex").drop(op.get_bind())
    sa.Enum(
        "created", "initialized", "running", "done", "error", name="me_model_validation_status"
    ).drop(op.get_bind())
    sa.Enum(
        "apical_dendrite",
        "basal_dendrite",
        "axon",
        "soma",
        "neuron_morphology",
        name="structuraldomain",
    ).drop(op.get_bind())
    sa.Enum(
        "mean",
        "median",
        "mode",
        "variance",
        "data_point",
        "sample_size",
        "standard_error",
        "standard_deviation",
        "raw",
        "minimum",
        "maximum",
        "sum",
        name="measurementstatistic",
    ).drop(op.get_bind())
    sa.Enum(
        "dimensionless",
        "linear_density__1_um",
        "volume_density__1_mm3",
        "linear__um",
        "area__um2",
        "volume__mm3",
        "angle__radian",
        name="measurementunit",
    ).drop(op.get_bind())
    sa.Enum(
        "voltage_clamp",
        "current_clamp",
        "conductance_clamp",
        "extracellular",
        "other",
        "unknown",
        name="electricalrecordingstimulustype",
    ).drop(op.get_bind())
    sa.Enum(
        "cheops",
        "constant",
        "pulse",
        "step",
        "ramp",
        "noise",
        "sinusoidal",
        "other",
        "two_steps",
        "unknown",
        name="electricalrecordingstimulusshape",
    ).drop(op.get_bind())
    sa.Enum(
        "intracellular", "extracellular", "both", "unknown", name="electricalrecordingtype"
    ).drop(op.get_bind())
    sa.Enum("in_vivo", "in_vitro", "in_silico", "unknown", name="electricalrecordingorigin").drop(
        op.get_bind()
    )
    sa.Enum("started", "failure", "success", name="singleneuronsimulationstatus").drop(
        op.get_bind()
    )
    sa.Enum("CREATED", "DELETED", name="assetstatus").drop(op.get_bind())
    sa.Enum(
        "neurolucida",
        "swc",
        "hdf5",
        "cell_composition_summary",
        "cell_composition_volumes",
        name="assetlabel",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
