"""brainatlas

Revision ID: 4a2e856cf2db
Revises: 7699329e803f
Create Date: 2025-05-23 11:15:26.847117

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "4a2e856cf2db"
down_revision: Union[str, None] = "7699329e803f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "brain_atlas_region",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("volume", sa.Float(), nullable=True),
        sa.Column("leaf_region", sa.Boolean(), nullable=False),
        sa.Column("brain_atlas_id", sa.Uuid(), nullable=False),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["brain_atlas_id"],
            ["brain_atlas.id"],
            name=op.f("fk_brain_atlas_region_brain_atlas_id_brain_atlas"),
        ),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_brain_atlas_region_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_brain_atlas_region_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_brain_atlas_region")),
    )
    op.create_index(
        op.f("ix_brain_atlas_region_brain_atlas_id"),
        "brain_atlas_region",
        ["brain_atlas_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_brain_atlas_region_brain_region_id"),
        "brain_atlas_region",
        ["brain_region_id"],
        unique=False,
    )
    op.drop_index("ix_mesh_brain_region_id", table_name="mesh")
    op.drop_index("ix_mesh_description_vector", table_name="mesh", postgresql_using="gin")
    op.drop_index("ix_mesh_name", table_name="mesh")
    op.drop_table("mesh")
    op.add_column("brain_atlas", sa.Column("hierarchy_id", sa.Uuid(), nullable=False))
    op.drop_index("ix_brain_atlas_brain_region_id", table_name="brain_atlas")
    op.create_index(
        op.f("ix_brain_atlas_hierarchy_id"), "brain_atlas", ["hierarchy_id"], unique=False
    )
    op.drop_constraint(
        "fk_brain_atlas_brain_region_id_brain_region", "brain_atlas", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_brain_atlas_hierarchy_id_brain_region_hierarchy"),
        "brain_atlas",
        "brain_region_hierarchy",
        ["hierarchy_id"],
        ["id"],
    )
    op.drop_column("brain_atlas", "brain_region_id")
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "emodel",
            "cell_composition",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "memodel",
            "mesh",
            "me_type_density",
            "reconstruction_morphology",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "ion_channel_model",
            "subject",
            "validation_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_mesh_mesh_description_vector = PGTrigger(
        schema="public",
        signature="mesh_description_vector",
        on_entity="public.mesh",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.mesh FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.create_entity(public_mesh_mesh_description_vector)

    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "emodel",
            "cell_composition",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "memodel",
            "mesh",
            "me_type_density",
            "reconstruction_morphology",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "ion_channel_model",
            "subject",
            "validation_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.add_column(
        "brain_atlas", sa.Column("brain_region_id", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(
        op.f("fk_brain_atlas_hierarchy_id_brain_region_hierarchy"),
        "brain_atlas",
        type_="foreignkey",
    )
    op.create_foreign_key(
        "fk_brain_atlas_brain_region_id_brain_region",
        "brain_atlas",
        "brain_region",
        ["brain_region_id"],
        ["id"],
    )
    op.drop_index(op.f("ix_brain_atlas_hierarchy_id"), table_name="brain_atlas")
    op.create_index(
        "ix_brain_atlas_brain_region_id", "brain_atlas", ["brain_region_id"], unique=False
    )
    op.drop_column("brain_atlas", "hierarchy_id")
    op.create_table(
        "mesh",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("brain_region_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"], ["brain_region.id"], name="fk_mesh_brain_region_id_brain_region"
        ),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name="fk_mesh_id_entity"),
        sa.PrimaryKeyConstraint("id", name="pk_mesh"),
    )
    op.create_index("ix_mesh_name", "mesh", ["name"], unique=False)
    op.create_index(
        "ix_mesh_description_vector",
        "mesh",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index("ix_mesh_brain_region_id", "mesh", ["brain_region_id"], unique=False)
    op.drop_index(op.f("ix_brain_atlas_region_brain_region_id"), table_name="brain_atlas_region")
    op.drop_index(op.f("ix_brain_atlas_region_brain_atlas_id"), table_name="brain_atlas_region")
    op.drop_table("brain_atlas_region")
    # ### end Alembic commands ###
