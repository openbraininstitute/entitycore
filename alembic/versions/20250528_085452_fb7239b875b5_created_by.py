"""created_by

Revision ID: fb7239b875b5
Revises: 1d1867bd2a4c
Create Date: 2025-05-28 08:54:52.383551

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "fb7239b875b5"
down_revision: Union[str, None] = "1d1867bd2a4c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("agent", sa.Column("created_by_id", sa.Uuid(), nullable=True))
    op.add_column("agent", sa.Column("updated_by_id", sa.Uuid(), nullable=True))
    op.create_index(op.f("ix_agent_created_by_id"), "agent", ["created_by_id"], unique=False)
    op.create_index(op.f("ix_agent_updated_by_id"), "agent", ["updated_by_id"], unique=False)
    op.create_foreign_key(
        op.f("fk_agent_updated_by_id_agent"), "agent", "agent", ["updated_by_id"], ["id"]
    )
    op.create_foreign_key(
        op.f("fk_agent_created_by_id_agent"), "agent", "agent", ["created_by_id"], ["id"]
    )
    op.alter_column("annotation", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("annotation", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("annotation_body", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("annotation_body", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("asset", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("asset", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brain_region", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("brain_region", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column(
        "brain_region_hierarchy", "created_by_id", existing_type=sa.UUID(), nullable=True
    )
    op.alter_column(
        "brain_region_hierarchy", "updated_by_id", existing_type=sa.UUID(), nullable=True
    )
    op.alter_column("contribution", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("contribution", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("entity", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("entity", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("etype_class", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("etype_class", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("etype_classification", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("etype_classification", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("ion", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("ion", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("license", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("license", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column(
        "measurement_annotation", "created_by_id", existing_type=sa.UUID(), nullable=True
    )
    op.alter_column(
        "measurement_annotation", "updated_by_id", existing_type=sa.UUID(), nullable=True
    )
    op.alter_column("mtype_class", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("mtype_class", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("mtype_classification", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("mtype_classification", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("role", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("role", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("species", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("species", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("strain", "created_by_id", existing_type=sa.UUID(), nullable=True)
    op.alter_column("strain", "updated_by_id", existing_type=sa.UUID(), nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("strain", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("strain", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("species", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("species", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("role", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("role", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column(
        "mtype_classification", "updated_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column(
        "mtype_classification", "created_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column("mtype_class", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("mtype_class", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column(
        "measurement_annotation", "updated_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column(
        "measurement_annotation", "created_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column("license", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("license", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("ion", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("ion", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column(
        "etype_classification", "updated_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column(
        "etype_classification", "created_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column("etype_class", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("etype_class", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("entity", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("entity", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("contribution", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("contribution", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column(
        "brain_region_hierarchy", "updated_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column(
        "brain_region_hierarchy", "created_by_id", existing_type=sa.UUID(), nullable=False
    )
    op.alter_column("brain_region", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("brain_region", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("asset", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("asset", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("annotation_body", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("annotation_body", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("annotation", "updated_by_id", existing_type=sa.UUID(), nullable=False)
    op.alter_column("annotation", "created_by_id", existing_type=sa.UUID(), nullable=False)
    op.drop_constraint(op.f("fk_agent_created_by_id_agent"), "agent", type_="foreignkey")
    op.drop_constraint(op.f("fk_agent_updated_by_id_agent"), "agent", type_="foreignkey")
    op.drop_index(op.f("ix_agent_updated_by_id"), table_name="agent")
    op.drop_index(op.f("ix_agent_created_by_id"), table_name="agent")
    op.drop_column("agent", "updated_by_id")
    op.drop_column("agent", "created_by_id")
    # ### end Alembic commands ###
