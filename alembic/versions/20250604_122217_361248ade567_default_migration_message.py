"""Default migration message

Revision ID: 361248ade567
Revises: 8f0d631d2bd4
Create Date: 2025-06-04 12:22:17.473535

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "361248ade567"
down_revision: Union[str, None] = "8f0d631d2bd4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("entity_source", "component_source", "application", name="publicationtype").create(
        op.get_bind()
    )
    op.create_table(
        "publication",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("DOI", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("authors", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("publication_year", sa.Integer(), nullable=True),
        sa.Column("abstract", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_publication_id_entity")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_publication")),
    )
    op.create_index(op.f("ix_publication_DOI"), "publication", ["DOI"], unique=False)
    op.create_index(
        "ix_publication_description_vector",
        "publication",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_publication_name"), "publication", ["name"], unique=False)
    op.create_table(
        "scientific_artifact",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("experiment_date", sa.DateTime(), nullable=True),
        sa.Column("contact_id", sa.Uuid(), nullable=True),
        sa.Column("subject_id", sa.Uuid(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("brain_region_id", sa.Uuid(), nullable=False),
        sa.Column("license_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_scientific_artifact_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["contact_id"], ["person.id"], name=op.f("fk_scientific_artifact_contact_id_person")
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_scientific_artifact_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"], ["license.id"], name=op.f("fk_scientific_artifact_license_id_license")
        ),
        sa.ForeignKeyConstraint(
            ["subject_id"], ["subject.id"], name=op.f("fk_scientific_artifact_subject_id_subject")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_scientific_artifact")),
    )
    op.create_index(
        op.f("ix_scientific_artifact_brain_region_id"),
        "scientific_artifact",
        ["brain_region_id"],
        unique=False,
    )
    op.create_index(
        "ix_scientific_artifact_description_vector",
        "scientific_artifact",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_scientific_artifact_license_id"),
        "scientific_artifact",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_scientific_artifact_name"), "scientific_artifact", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_scientific_artifact_subject_id"),
        "scientific_artifact",
        ["subject_id"],
        unique=False,
    )
    op.create_table(
        "scientific_artifact_publication_link",
        sa.Column("publication_id", sa.Uuid(), nullable=False),
        sa.Column(
            "publication_type",
            postgresql.ENUM(
                "entity_source",
                "component_source",
                "application",
                name="publicationtype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("scientific_artifact_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["publication_id"],
            ["publication.id"],
            name=op.f("fk_scientific_artifact_publication_link_publication_id_publication"),
        ),
        sa.ForeignKeyConstraint(
            ["scientific_artifact_id"],
            ["scientific_artifact.id"],
            name=op.f(
                "fk_scientific_artifact_publication_link_scientific_artifact_id_scientific_artifact"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_scientific_artifact_publication_link")),
        sa.UniqueConstraint("publication_id", "scientific_artifact_id", name="uq_publishedin_ids"),
    )
    op.create_index(
        op.f("ix_scientific_artifact_publication_link_creation_date"),
        "scientific_artifact_publication_link",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_scientific_artifact_publication_link_publication_id"),
        "scientific_artifact_publication_link",
        ["publication_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_scientific_artifact_publication_link_scientific_artifact_id"),
        "scientific_artifact_publication_link",
        ["scientific_artifact_id"],
        unique=False,
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "emodel",
            "cell_composition",
            "memodel_calibration_result",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "memodel",
            "mesh",
            "me_type_density",
            "reconstruction_morphology",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "ion_channel_model",
            "subject",
            "validation_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.drop_index(
        op.f("ix_scientific_artifact_publication_link_scientific_artifact_id"),
        table_name="scientific_artifact_publication_link",
    )
    op.drop_index(
        op.f("ix_scientific_artifact_publication_link_publication_id"),
        table_name="scientific_artifact_publication_link",
    )
    op.drop_index(
        op.f("ix_scientific_artifact_publication_link_creation_date"),
        table_name="scientific_artifact_publication_link",
    )
    op.drop_table("scientific_artifact_publication_link")
    op.drop_index(op.f("ix_scientific_artifact_subject_id"), table_name="scientific_artifact")
    op.drop_index(op.f("ix_scientific_artifact_name"), table_name="scientific_artifact")
    op.drop_index(op.f("ix_scientific_artifact_license_id"), table_name="scientific_artifact")
    op.drop_index(
        "ix_scientific_artifact_description_vector",
        table_name="scientific_artifact",
        postgresql_using="gin",
    )
    op.drop_index(op.f("ix_scientific_artifact_brain_region_id"), table_name="scientific_artifact")
    op.drop_table("scientific_artifact")
    op.drop_index(op.f("ix_publication_name"), table_name="publication")
    op.drop_index(
        "ix_publication_description_vector", table_name="publication", postgresql_using="gin"
    )
    op.drop_index(op.f("ix_publication_DOI"), table_name="publication")
    op.drop_table("publication")
    sa.Enum("entity_source", "component_source", "application", name="publicationtype").drop(
        op.get_bind()
    )
    # ### end Alembic commands ###
