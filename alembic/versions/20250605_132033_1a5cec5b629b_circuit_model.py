"""circuit_model

Revision ID: 1a5cec5b629b
Revises: 0b6f073c2628
Create Date: 2025-06-05 13:20:33.747219

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "1a5cec5b629b"
down_revision: Union[str, None] = "0b6f073c2628"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "single",
        "pair",
        "small",
        "microcircuit",
        "region",
        "system",
        "whole_brain",
        name="circuitscale",
    ).create(op.get_bind())
    sa.Enum("computational_model", "em_reconstruction", name="circuitbuildcategory").create(
        op.get_bind()
    )
    sa.Enum("circuit_extraction", "circuit_rewiring", name="derivationtype").create(op.get_bind())
    op.create_table(
        "circuit",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("root_circuit_id", sa.Uuid(), nullable=True),
        sa.Column("atlas_id", sa.Uuid(), nullable=True),
        sa.Column(
            "build_category",
            postgresql.ENUM(
                "computational_model",
                "em_reconstruction",
                name="circuitbuildcategory",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "scale",
            postgresql.ENUM(
                "single",
                "pair",
                "small",
                "microcircuit",
                "region",
                "system",
                "whole_brain",
                name="circuitscale",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("has_morphologies", sa.Boolean(), nullable=False),
        sa.Column("has_point_neurons", sa.Boolean(), nullable=False),
        sa.Column("has_electrical_cell_models", sa.Boolean(), nullable=False),
        sa.Column("has_spines", sa.Boolean(), nullable=False),
        sa.Column("number_neurons", sa.BigInteger(), nullable=False),
        sa.Column("number_synapses", sa.BigInteger(), nullable=False),
        sa.Column("number_connections", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["atlas_id"], ["brain_atlas.id"], name=op.f("fk_circuit_atlas_id_brain_atlas")
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["scientific_artifact.id"], name=op.f("fk_circuit_id_scientific_artifact")
        ),
        sa.ForeignKeyConstraint(
            ["root_circuit_id"], ["circuit.id"], name=op.f("fk_circuit_root_circuit_id_circuit")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_circuit")),
    )
    op.create_index(op.f("ix_circuit_atlas_id"), "circuit", ["atlas_id"], unique=False)
    op.create_index(
        "ix_circuit_description_vector",
        "circuit",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_circuit_name"), "circuit", ["name"], unique=False)
    op.create_index(
        op.f("ix_circuit_root_circuit_id"), "circuit", ["root_circuit_id"], unique=False
    )
    op.add_column(
        "derivation",
        sa.Column(
            "derivation_type",
            postgresql.ENUM(
                "circuit_extraction", "circuit_rewiring", name="derivationtype", create_type=False
            ),
            nullable=True,
        ),
    )
    op.drop_index(
        "ix_scientific_artifact_description_vector",
        table_name="scientific_artifact",
        postgresql_using="gin",
    )
    op.drop_index("ix_scientific_artifact_name", table_name="scientific_artifact")
    op.drop_column("scientific_artifact", "name")
    op.drop_column("scientific_artifact", "description")
    op.drop_column("scientific_artifact", "description_vector")
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="assetlabel",
        new_values=[
            "neurolucida",
            "swc",
            "hdf5",
            "cell_composition_summary",
            "cell_composition_volumes",
            "single_neuron_synaptome_config",
            "single_neuron_synaptome_simulation_io_result",
            "single_cell_simulation_data",
            "sonata_circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="asset", column_name="label")
        ],
        enum_values_to_rename=[],
    )
    public_scientific_artifact_scientific_artifact_description_vector = PGTrigger(
        schema="public",
        signature="scientific_artifact_description_vector",
        on_entity="public.scientific_artifact",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.scientific_artifact FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.drop_entity(public_scientific_artifact_scientific_artifact_description_vector)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_scientific_artifact_scientific_artifact_description_vector = PGTrigger(
        schema="public",
        signature="scientific_artifact_description_vector",
        on_entity="public.scientific_artifact",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.scientific_artifact FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.create_entity(public_scientific_artifact_scientific_artifact_description_vector)

    op.sync_enum_values(
        enum_schema="public",
        enum_name="assetlabel",
        new_values=[
            "neurolucida",
            "swc",
            "hdf5",
            "cell_composition_summary",
            "cell_composition_volumes",
            "single_neuron_synaptome_config",
            "single_neuron_synaptome_simulation_io_result",
            "single_cell_simulation_data",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="asset", column_name="label")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.add_column(
        "scientific_artifact",
        sa.Column("description_vector", postgresql.TSVECTOR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "scientific_artifact",
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "scientific_artifact", sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.create_index("ix_scientific_artifact_name", "scientific_artifact", ["name"], unique=False)
    op.create_index(
        "ix_scientific_artifact_description_vector",
        "scientific_artifact",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.drop_column("derivation", "derivation_type")
    op.drop_index(op.f("ix_circuit_root_circuit_id"), table_name="circuit")
    op.drop_index(op.f("ix_circuit_name"), table_name="circuit")
    op.drop_index("ix_circuit_description_vector", table_name="circuit", postgresql_using="gin")
    op.drop_index(op.f("ix_circuit_atlas_id"), table_name="circuit")
    op.drop_table("circuit")
    sa.Enum("circuit_extraction", "circuit_rewiring", name="derivationtype").drop(op.get_bind())
    sa.Enum("computational_model", "em_reconstruction", name="circuitbuildcategory").drop(
        op.get_bind()
    )
    sa.Enum(
        "single",
        "pair",
        "small",
        "microcircuit",
        "region",
        "system",
        "whole_brain",
        name="circuitscale",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
