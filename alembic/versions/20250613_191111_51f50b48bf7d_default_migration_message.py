"""Default migration message

Revision ID: 51f50b48bf7d
Revises: e84f2d85a325
Create Date: 2025-06-13 19:11:11.269487

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "51f50b48bf7d"
down_revision: Union[str, None] = "e84f2d85a325"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "simulation_result",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name=op.f("fk_simulation_result_id_entity")),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_simulation_result")),
    )
    op.drop_table("simulation_report")
    op.add_column("generation", sa.Column("generation_entity_id", sa.Uuid(), nullable=False))
    op.add_column("generation", sa.Column("generation_activity_id", sa.Uuid(), nullable=False))
    op.drop_constraint("uq_generation_entity_id_activity_id", "generation", type_="unique")
    op.drop_constraint("fk_generation_activity_id_activity", "generation", type_="foreignkey")
    op.drop_constraint("fk_generation_entity_id_entity", "generation", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_generation_generation_entity_id_entity"),
        "generation",
        "entity",
        ["generation_entity_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_generation_generation_activity_id_activity"),
        "generation",
        "activity",
        ["generation_activity_id"],
        ["id"],
    )
    op.drop_column("generation", "activity_id")
    op.drop_column("generation", "entity_id")
    op.add_column("usage", sa.Column("usage_entity_id", sa.Uuid(), nullable=False))
    op.add_column("usage", sa.Column("usage_activity_id", sa.Uuid(), nullable=False))
    op.drop_constraint("uq_usage_entity_id_activity_id", "usage", type_="unique")
    op.drop_constraint("fk_usage_entity_id_entity", "usage", type_="foreignkey")
    op.drop_constraint("fk_usage_activity_id_activity", "usage", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_usage_usage_activity_id_activity"),
        "usage",
        "activity",
        ["usage_activity_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_usage_usage_entity_id_entity"), "usage", "entity", ["usage_entity_id"], ["id"]
    )
    op.drop_column("usage", "activity_id")
    op.drop_column("usage", "entity_id")
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_report",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.add_column("usage", sa.Column("entity_id", sa.UUID(), autoincrement=False, nullable=False))
    op.add_column("usage", sa.Column("activity_id", sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(op.f("fk_usage_usage_entity_id_entity"), "usage", type_="foreignkey")
    op.drop_constraint(op.f("fk_usage_usage_activity_id_activity"), "usage", type_="foreignkey")
    op.create_foreign_key(
        "fk_usage_activity_id_activity", "usage", "activity", ["activity_id"], ["id"]
    )
    op.create_foreign_key("fk_usage_entity_id_entity", "usage", "entity", ["entity_id"], ["id"])
    op.create_unique_constraint(
        "uq_usage_entity_id_activity_id", "usage", ["entity_id", "activity_id"]
    )
    op.drop_column("usage", "usage_activity_id")
    op.drop_column("usage", "usage_entity_id")
    op.add_column(
        "generation", sa.Column("entity_id", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.add_column(
        "generation", sa.Column("activity_id", sa.UUID(), autoincrement=False, nullable=False)
    )
    op.drop_constraint(
        op.f("fk_generation_generation_activity_id_activity"), "generation", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("fk_generation_generation_entity_id_entity"), "generation", type_="foreignkey"
    )
    op.create_foreign_key(
        "fk_generation_entity_id_entity", "generation", "entity", ["entity_id"], ["id"]
    )
    op.create_foreign_key(
        "fk_generation_activity_id_activity", "generation", "activity", ["activity_id"], ["id"]
    )
    op.create_unique_constraint(
        "uq_generation_entity_id_activity_id", "generation", ["entity_id", "activity_id"]
    )
    op.drop_column("generation", "generation_activity_id")
    op.drop_column("generation", "generation_entity_id")
    op.create_table(
        "simulation_report",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(["id"], ["entity.id"], name="fk_simulation_report_id_entity"),
        sa.PrimaryKeyConstraint("id", name="pk_simulation_report"),
    )
    op.drop_table("simulation_result")
    # ### end Alembic commands ###
