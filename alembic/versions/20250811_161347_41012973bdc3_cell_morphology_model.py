"""cell_morphology_model

Revision ID: 41012973bdc3
Revises: 8a2a82a25cca
Create Date: 2025-08-11 16:13:47.392807

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "41012973bdc3"
down_revision: Union[str, None] = "8a2a82a25cca"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("raw", "curated", "unraveled", "repaired", name="repairpipelinetype").create(
        op.get_bind()
    )
    sa.Enum("cloned", "mix_and_match", "mousified", "ratified", name="methodstype").create(
        op.get_bind()
    )
    sa.Enum("coronal", "sagittal", "horizontal", "custom", name="slicingdirectiontype").create(
        op.get_bind()
    )
    sa.Enum(
        "golgi",
        "nissl",
        "luxol_fast_blue",
        "fluorescent_nissl",
        "fluorescent_dyes",
        "fluorescent_orotein_expression",
        "immunohistochemistry",
        "other",
        name="stainingtype",
    ).create(op.get_bind())
    op.create_table(
        "morphology_protocol",
        sa.Column("protocol_document", sa.String(), nullable=True),
        sa.Column("protocol_design", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.Column("updated_by_id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["agent.id"], name=op.f("fk_morphology_protocol_created_by_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["agent.id"], name=op.f("fk_morphology_protocol_updated_by_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_morphology_protocol")),
    )
    op.create_index(
        op.f("ix_morphology_protocol_created_by_id"),
        "morphology_protocol",
        ["created_by_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_morphology_protocol_creation_date"),
        "morphology_protocol",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_morphology_protocol_updated_by_id"),
        "morphology_protocol",
        ["updated_by_id"],
        unique=False,
    )
    op.create_table(
        "computational",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("method_description", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"], ["morphology_protocol.id"], name=op.f("fk_computational_id_morphology_protocol")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_computational")),
    )
    op.create_table(
        "digital",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "staining_type",
            postgresql.ENUM(
                "golgi",
                "nissl",
                "luxol_fast_blue",
                "fluorescent_nissl",
                "fluorescent_dyes",
                "fluorescent_orotein_expression",
                "immunohistochemistry",
                "other",
                name="stainingtype",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("slicing_thickness", sa.Float(), nullable=False),
        sa.Column(
            "slicing_direction",
            postgresql.ENUM(
                "coronal",
                "sagittal",
                "horizontal",
                "custom",
                name="slicingdirectiontype",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("magnification", sa.Float(), nullable=True),
        sa.Column("tissue_shrinkage", sa.Float(), nullable=True),
        sa.Column("corrected_for_shrinkage", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["morphology_protocol.id"], name=op.f("fk_digital_id_morphology_protocol")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_digital")),
    )
    op.create_table(
        "modified",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "method_description",
            postgresql.ENUM(
                "cloned",
                "mix_and_match",
                "mousified",
                "ratified",
                name="methodstype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["morphology_protocol.id"], name=op.f("fk_modified_id_morphology_protocol")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_modified")),
    )
    op.create_table(
        "cell_morphology",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("location", app.db.types.PointLocationType(astext_type=Text()), nullable=True),
        sa.Column("morphology_protocol_id", sa.Uuid(), nullable=True),
        sa.Column(
            "repair_pipeline_state",
            postgresql.ENUM(
                "raw",
                "curated",
                "unraveled",
                "repaired",
                name="repairpipelinetype",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["scientific_artifact.id"],
            name=op.f("fk_cell_morphology_id_scientific_artifact"),
        ),
        sa.ForeignKeyConstraint(
            ["morphology_protocol_id"],
            ["morphology_protocol.id"],
            name=op.f("fk_cell_morphology_morphology_protocol_id_morphology_protocol"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_cell_morphology")),
    )
    op.create_index(
        "ix_cell_morphology_description_vector",
        "cell_morphology",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_cell_morphology_morphology_protocol_id"),
        "cell_morphology",
        ["morphology_protocol_id"],
        unique=False,
    )
    op.create_index(op.f("ix_cell_morphology_name"), "cell_morphology", ["name"], unique=False)
    op.drop_index(
        op.f("ix_reconstruction_morphology_brain_region_id"), table_name="reconstruction_morphology"
    )
    op.drop_index(
        op.f("ix_reconstruction_morphology_description_vector"),
        table_name="reconstruction_morphology",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_reconstruction_morphology_license_id"), table_name="reconstruction_morphology"
    )
    op.drop_index(op.f("ix_reconstruction_morphology_name"), table_name="reconstruction_morphology")
    op.drop_index(
        op.f("ix_reconstruction_morphology_species_id"), table_name="reconstruction_morphology"
    )
    op.drop_index(
        op.f("ix_reconstruction_morphology_strain_id"), table_name="reconstruction_morphology"
    )
    op.drop_constraint(
        op.f("fk_emodel_exemplar_morphology_id_reconstruction_morphology"),
        "emodel",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_emodel_exemplar_morphology_id_cell_morphology"),
        "emodel",
        "cell_morphology",
        ["exemplar_morphology_id"],
        ["id"],
    )
    op.drop_constraint(
        op.f("fk_memodel_morphology_id_reconstruction_morphology"), "memodel", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_memodel_morphology_id_cell_morphology"),
        "memodel",
        "cell_morphology",
        ["morphology_id"],
        ["id"],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "cell_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    public_unauthorized_private_reference_function_memodel_morphology_id_cell_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_cell_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_cell_morphology
    )

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_cell_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_cell_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_cell_morphology()",
    )
    op.create_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_cell_morphology
    )

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.reconstruction_morphology FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.drop_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_re = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_re",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.memodel FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_r()",
    )
    op.drop_entity(public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_re)

    public_unauthorized_private_reference_function_memodel_morphology_id_r = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_r()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.drop_table("reconstruction_morphology")
    op.drop_entity(public_unauthorized_private_reference_function_memodel_morphology_id_r)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_unauthorized_private_reference_function_memodel_morphology_id_r = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_r()",
        definition="returns trigger\n LANGUAGE plpgsql\nAS $function$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $function$",
    )
    op.create_entity(public_unauthorized_private_reference_function_memodel_morphology_id_r)

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_re = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_re",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.memodel FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_r()",
    )
    op.create_entity(public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_re)

    public_reconstruction_morphology_reconstruction_morphology_description_vector = PGTrigger(
        schema="public",
        signature="reconstruction_morphology_description_vector",
        on_entity="public.reconstruction_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON public.reconstruction_morphology FOR EACH ROW EXECUTE FUNCTION tsvector_update_trigger('description_vector', 'pg_catalog.english', 'description', 'name')",
    )
    op.create_entity(public_reconstruction_morphology_reconstruction_morphology_description_vector)

    public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_cell_morphology = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_memodel_morphology_id_cell_morphology",
        on_entity="public.memodel",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON memodel\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_memodel_morphology_id_cell_morphology()",
    )
    op.drop_entity(
        public_memodel_unauthorized_private_reference_trigger_memodel_morphology_id_cell_morphology
    )

    public_unauthorized_private_reference_function_memodel_morphology_id_cell_morphology = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_memodel_morphology_id_cell_morphology()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.morphology_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_memodel_morphology_id_cell_morphology
    )

    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.drop_constraint(
        op.f("fk_memodel_morphology_id_cell_morphology"), "memodel", type_="foreignkey"
    )
    op.create_table(
        "reconstruction_morphology",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "location", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True
        ),
        sa.Column("license_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("brain_region_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("species_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("strain_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["brain_region_id"],
            ["brain_region.id"],
            name=op.f("fk_reconstruction_morphology_brain_region_id_brain_region"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_reconstruction_morphology_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["license.id"],
            name=op.f("fk_reconstruction_morphology_license_id_license"),
        ),
        sa.ForeignKeyConstraint(
            ["species_id"],
            ["species.id"],
            name=op.f("fk_reconstruction_morphology_species_id_species"),
        ),
        sa.ForeignKeyConstraint(
            ["strain_id", "species_id"],
            ["strain.id", "strain.species_id"],
            name=op.f("fk_reconstruction_morphology_strain_id_species_id"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_reconstruction_morphology")),
    )
    op.create_foreign_key(
        op.f("fk_memodel_morphology_id_reconstruction_morphology"),
        "memodel",
        "reconstruction_morphology",
        ["morphology_id"],
        ["id"],
    )
    op.drop_constraint(
        op.f("fk_emodel_exemplar_morphology_id_cell_morphology"), "emodel", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_emodel_exemplar_morphology_id_reconstruction_morphology"),
        "emodel",
        "reconstruction_morphology",
        ["exemplar_morphology_id"],
        ["id"],
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_strain_id"),
        "reconstruction_morphology",
        ["strain_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_species_id"),
        "reconstruction_morphology",
        ["species_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_name"),
        "reconstruction_morphology",
        ["name"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_license_id"),
        "reconstruction_morphology",
        ["license_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_description_vector"),
        "reconstruction_morphology",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_reconstruction_morphology_brain_region_id"),
        "reconstruction_morphology",
        ["brain_region_id"],
        unique=False,
    )
    op.drop_index(op.f("ix_cell_morphology_name"), table_name="cell_morphology")
    op.drop_index(op.f("ix_cell_morphology_morphology_protocol_id"), table_name="cell_morphology")
    op.drop_index(
        "ix_cell_morphology_description_vector",
        table_name="cell_morphology",
        postgresql_using="gin",
    )
    op.drop_table("cell_morphology")
    op.drop_table("modified")
    op.drop_table("digital")
    op.drop_table("computational")
    op.drop_index(op.f("ix_morphology_protocol_updated_by_id"), table_name="morphology_protocol")
    op.drop_index(op.f("ix_morphology_protocol_creation_date"), table_name="morphology_protocol")
    op.drop_index(op.f("ix_morphology_protocol_created_by_id"), table_name="morphology_protocol")
    op.drop_table("morphology_protocol")
    sa.Enum(
        "golgi",
        "nissl",
        "luxol_fast_blue",
        "fluorescent_nissl",
        "fluorescent_dyes",
        "fluorescent_orotein_expression",
        "immunohistochemistry",
        "other",
        name="stainingtype",
    ).drop(op.get_bind())
    sa.Enum("coronal", "sagittal", "horizontal", "custom", name="slicingdirectiontype").drop(
        op.get_bind()
    )
    sa.Enum("cloned", "mix_and_match", "mousified", "ratified", name="methodstype").drop(
        op.get_bind()
    )
    sa.Enum("raw", "curated", "unraveled", "repaired", name="repairpipelinetype").drop(
        op.get_bind()
    )
    # ### end Alembic commands ###
