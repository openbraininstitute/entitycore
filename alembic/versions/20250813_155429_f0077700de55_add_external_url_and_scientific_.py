"""Add external_url and scientific_artifact_external_url_link

Revision ID: f0077700de55
Revises: 77e367d5b4a5
Create Date: 2025-08-13 15:54:29.063769

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "f0077700de55"
down_revision: Union[str, None] = "77e367d5b4a5"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("channelpedia", "modeldb", "icgenealogy", name="externalsource").create(op.get_bind())
    op.create_table(
        "external_url",
        sa.Column(
            "source",
            postgresql.ENUM(
                "channelpedia", "modeldb", "icgenealogy", name="externalsource", create_type=False
            ),
            nullable=False,
        ),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.Column("updated_by_id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["agent.id"], name=op.f("fk_external_url_created_by_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["agent.id"], name=op.f("fk_external_url_updated_by_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_external_url")),
    )
    op.create_index(
        op.f("ix_external_url_created_by_id"), "external_url", ["created_by_id"], unique=False
    )
    op.create_index(
        op.f("ix_external_url_creation_date"), "external_url", ["creation_date"], unique=False
    )
    op.create_index(
        op.f("ix_external_url_updated_by_id"), "external_url", ["updated_by_id"], unique=False
    )
    op.create_index(op.f("ix_external_url_url"), "external_url", ["url"], unique=True)
    op.create_table(
        "scientific_artifact_external_url_link",
        sa.Column("external_url_id", sa.Uuid(), nullable=False),
        sa.Column("scientific_artifact_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.Column("updated_by_id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["agent.id"],
            name=op.f("fk_scientific_artifact_external_url_link_created_by_id_agent"),
        ),
        sa.ForeignKeyConstraint(
            ["external_url_id"],
            ["external_url.id"],
            name=op.f("fk_scientific_artifact_external_url_link_external_url_id_external_url"),
        ),
        sa.ForeignKeyConstraint(
            ["scientific_artifact_id"],
            ["scientific_artifact.id"],
            name=op.f(
                "fk_scientific_artifact_external_url_link_scientific_artifact_id_scientific_artifact"
            ),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["agent.id"],
            name=op.f("fk_scientific_artifact_external_url_link_updated_by_id_agent"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_scientific_artifact_external_url_link")),
        sa.UniqueConstraint(
            "external_url_id",
            "scientific_artifact_id",
            name="uq_scientific_artifact_external_url_link",
        ),
    )
    op.create_index(
        op.f("ix_scientific_artifact_external_url_link_created_by_id"),
        "scientific_artifact_external_url_link",
        ["created_by_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_scientific_artifact_external_url_link_creation_date"),
        "scientific_artifact_external_url_link",
        ["creation_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_scientific_artifact_external_url_link_external_url_id"),
        "scientific_artifact_external_url_link",
        ["external_url_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_scientific_artifact_external_url_link_scientific_artifact_id"),
        "scientific_artifact_external_url_link",
        ["scientific_artifact_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_scientific_artifact_external_url_link_updated_by_id"),
        "scientific_artifact_external_url_link",
        ["updated_by_id"],
        unique=False,
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "external_url",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "publication",
            "reconstruction_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.drop_index(
        op.f("ix_scientific_artifact_external_url_link_updated_by_id"),
        table_name="scientific_artifact_external_url_link",
    )
    op.drop_index(
        op.f("ix_scientific_artifact_external_url_link_scientific_artifact_id"),
        table_name="scientific_artifact_external_url_link",
    )
    op.drop_index(
        op.f("ix_scientific_artifact_external_url_link_external_url_id"),
        table_name="scientific_artifact_external_url_link",
    )
    op.drop_index(
        op.f("ix_scientific_artifact_external_url_link_creation_date"),
        table_name="scientific_artifact_external_url_link",
    )
    op.drop_index(
        op.f("ix_scientific_artifact_external_url_link_created_by_id"),
        table_name="scientific_artifact_external_url_link",
    )
    op.drop_table("scientific_artifact_external_url_link")
    op.drop_index(op.f("ix_external_url_url"), table_name="external_url")
    op.drop_index(op.f("ix_external_url_updated_by_id"), table_name="external_url")
    op.drop_index(op.f("ix_external_url_creation_date"), table_name="external_url")
    op.drop_index(op.f("ix_external_url_created_by_id"), table_name="external_url")
    op.drop_table("external_url")
    sa.Enum("channelpedia", "modeldb", "icgenealogy", name="externalsource").drop(op.get_bind())
    # ### end Alembic commands ###
