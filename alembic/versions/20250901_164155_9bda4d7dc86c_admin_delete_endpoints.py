"""admin_delete_endpoints

Revision ID: 9bda4d7dc86c
Revises: 02b804d687ee
Create Date: 2025-09-01 16:41:55.755051

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "9bda4d7dc86c"
down_revision: Union[str, None] = "02b804d687ee"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("fk_annotation_entity_id_entity"), "annotation", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_annotation_entity_id_entity"),
        "annotation",
        "entity",
        ["entity_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(op.f("fk_contribution_entity_id_entity"), "contribution", type_="foreignkey")
    op.drop_constraint(op.f("fk_contribution_agent_id_agent"), "contribution", type_="foreignkey")
    op.drop_constraint(op.f("fk_contribution_role_id_role"), "contribution", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_contribution_entity_id_entity"),
        "contribution",
        "entity",
        ["entity_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_contribution_role_id_role"),
        "contribution",
        "role",
        ["role_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_contribution_agent_id_agent"),
        "contribution",
        "agent",
        ["agent_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(op.f("fk_derivation_generated_id_entity"), "derivation", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_derivation_generated_id_entity"),
        "derivation",
        "entity",
        ["generated_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        op.f("fk_electrical_recording_stimulus_recording_id_electrica_985a"),
        "electrical_recording_stimulus",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_electrical_recording_stimulus_recording_id_electrical_cell_recording"),
        "electrical_recording_stimulus",
        "electrical_cell_recording",
        ["recording_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        op.f("fk_etype_classification_etype_class_id_etype_class"),
        "etype_classification",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_etype_classification_entity_id_entity"), "etype_classification", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_etype_classification_etype_class_id_etype_class"),
        "etype_classification",
        "etype_class",
        ["etype_class_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_etype_classification_entity_id_entity"),
        "etype_classification",
        "entity",
        ["entity_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        op.f("fk_generation_generation_entity_id_entity"), "generation", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_generation_generation_entity_id_entity"),
        "generation",
        "entity",
        ["generation_entity_id"],
        ["id"],
    )
    op.drop_constraint(
        op.f("fk_mtype_classification_mtype_class_id_mtype_class"),
        "mtype_classification",
        type_="foreignkey",
    )
    op.drop_constraint(
        op.f("fk_mtype_classification_entity_id_entity"), "mtype_classification", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_mtype_classification_mtype_class_id_mtype_class"),
        "mtype_classification",
        "mtype_class",
        ["mtype_class_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_foreign_key(
        op.f("fk_mtype_classification_entity_id_entity"),
        "mtype_classification",
        "entity",
        ["entity_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(op.f("fk_usage_usage_entity_id_entity"), "usage", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_usage_usage_entity_id_entity"), "usage", "entity", ["usage_entity_id"], ["id"]
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f("fk_usage_usage_entity_id_entity"), "usage", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_usage_usage_entity_id_entity"),
        "usage",
        "entity",
        ["usage_entity_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        op.f("fk_mtype_classification_entity_id_entity"), "mtype_classification", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("fk_mtype_classification_mtype_class_id_mtype_class"),
        "mtype_classification",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_mtype_classification_entity_id_entity"),
        "mtype_classification",
        "entity",
        ["entity_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_mtype_classification_mtype_class_id_mtype_class"),
        "mtype_classification",
        "mtype_class",
        ["mtype_class_id"],
        ["id"],
    )
    op.drop_constraint(
        op.f("fk_generation_generation_entity_id_entity"), "generation", type_="foreignkey"
    )
    op.create_foreign_key(
        op.f("fk_generation_generation_entity_id_entity"),
        "generation",
        "entity",
        ["generation_entity_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_constraint(
        op.f("fk_etype_classification_entity_id_entity"), "etype_classification", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("fk_etype_classification_etype_class_id_etype_class"),
        "etype_classification",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_etype_classification_entity_id_entity"),
        "etype_classification",
        "entity",
        ["entity_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("fk_etype_classification_etype_class_id_etype_class"),
        "etype_classification",
        "etype_class",
        ["etype_class_id"],
        ["id"],
    )
    op.drop_constraint(
        op.f("fk_electrical_recording_stimulus_recording_id_electrical_cell_recording"),
        "electrical_recording_stimulus",
        type_="foreignkey",
    )
    op.create_foreign_key(
        op.f("fk_electrical_recording_stimulus_recording_id_electrica_985a"),
        "electrical_recording_stimulus",
        "electrical_cell_recording",
        ["recording_id"],
        ["id"],
    )
    op.drop_constraint(op.f("fk_derivation_generated_id_entity"), "derivation", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_derivation_generated_id_entity"), "derivation", "entity", ["generated_id"], ["id"]
    )
    op.drop_constraint(op.f("fk_contribution_agent_id_agent"), "contribution", type_="foreignkey")
    op.drop_constraint(op.f("fk_contribution_role_id_role"), "contribution", type_="foreignkey")
    op.drop_constraint(op.f("fk_contribution_entity_id_entity"), "contribution", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_contribution_role_id_role"), "contribution", "role", ["role_id"], ["id"]
    )
    op.create_foreign_key(
        op.f("fk_contribution_agent_id_agent"), "contribution", "agent", ["agent_id"], ["id"]
    )
    op.create_foreign_key(
        op.f("fk_contribution_entity_id_entity"), "contribution", "entity", ["entity_id"], ["id"]
    )
    op.drop_constraint(op.f("fk_annotation_entity_id_entity"), "annotation", type_="foreignkey")
    op.create_foreign_key(
        op.f("fk_annotation_entity_id_entity"), "annotation", "entity", ["entity_id"], ["id"]
    )
    # ### end Alembic commands ###
