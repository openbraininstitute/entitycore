"""Add triggers

Revision ID: 01644f002227
Revises: 7f8e31734e4c
Create Date: 2025-09-05 13:47:08.502481

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "01644f002227"
down_revision: Union[str, None] = "7f8e31734e4c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NEW.cell_morphology_protocol_id IS NULL THEN RETURN NEW; END IF;\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.cell_morphology_protocol_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(
        public_unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol
    )

    public_cell_morphology_unauthorized_private_reference_trigger_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol",
        on_entity="public.cell_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON cell_morphology\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol()",
    )
    op.create_entity(
        public_cell_morphology_unauthorized_private_reference_trigger_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_cell_morphology_unauthorized_private_reference_trigger_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol = PGTrigger(
        schema="public",
        signature="unauthorized_private_reference_trigger_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol",
        on_entity="public.cell_morphology",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON cell_morphology\n            FOR EACH ROW EXECUTE FUNCTION unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol()",
    )
    op.drop_entity(
        public_cell_morphology_unauthorized_private_reference_trigger_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol
    )

    public_unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol = PGFunction(
        schema="public",
        signature="unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                IF NEW.cell_morphology_protocol_id IS NULL THEN RETURN NEW; END IF;\n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.cell_morphology_protocol_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(
        public_unauthorized_private_reference_function_cell_morphology_cell_morphology_protocol_id_cell_morphology_protocol
    )

    # ### end Alembic commands ###
