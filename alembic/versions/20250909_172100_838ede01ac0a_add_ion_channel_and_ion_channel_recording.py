"""Add ion_channel and ion_channel_recording

Revision ID: 838ede01ac0a
Revises: 9df9950d73a0
Create Date: 2025-09-09 17:21:00.639981

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "838ede01ac0a"
down_revision: Union[str, None] = "9df9950d73a0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ion_channel",
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("gene", sa.String(), nullable=False),
        sa.Column("synonyms", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_by_id", sa.Uuid(), nullable=False),
        sa.Column("updated_by_id", sa.Uuid(), nullable=False),
        sa.Column(
            "creation_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_date",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["agent.id"], name=op.f("fk_ion_channel_created_by_id_agent")
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["agent.id"], name=op.f("fk_ion_channel_updated_by_id_agent")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel")),
    )
    op.create_index(
        op.f("ix_ion_channel_created_by_id"), "ion_channel", ["created_by_id"], unique=False
    )
    op.create_index(
        op.f("ix_ion_channel_creation_date"), "ion_channel", ["creation_date"], unique=False
    )
    op.create_index(
        "ix_ion_channel_description_vector",
        "ion_channel",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(op.f("ix_ion_channel_name"), "ion_channel", ["name"], unique=False)
    op.create_index(op.f("ix_ion_channel_label"), "ion_channel", ["label"], unique=True)
    op.create_index(
        op.f("ix_ion_channel_updated_by_id"), "ion_channel", ["updated_by_id"], unique=False
    )
    op.create_table(
        "ion_channel_recording",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("ion_channel_id", sa.Uuid(), nullable=False),
        sa.Column("cell_line", sa.String(), nullable=False),
        sa.Column(
            "recording_type",
            postgresql.ENUM(
                "intracellular",
                "extracellular",
                "both",
                "unknown",
                name="electricalrecordingtype",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column(
            "recording_origin",
            postgresql.ENUM(
                "in_vivo",
                "in_vitro",
                "in_silico",
                "unknown",
                name="electricalrecordingorigin",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("recording_location", sa.ARRAY(sa.VARCHAR()), nullable=False),
        sa.Column("ljp", sa.Float(), nullable=False),
        sa.Column("temperature", sa.Float(), nullable=True),
        sa.Column("comment", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["scientific_artifact.id"],
            name=op.f("fk_ion_channel_recording_id_scientific_artifact"),
        ),
        sa.ForeignKeyConstraint(
            ["ion_channel_id"],
            ["ion_channel.id"],
            name=op.f("fk_ion_channel_recording_ion_channel_id_ion_channel"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel_recording")),
    )
    op.create_index(
        "ix_ion_channel_recording_description_vector",
        "ion_channel_recording",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_ion_channel_recording_ion_channel_id"),
        "ion_channel_recording",
        ["ion_channel_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ion_channel_recording_name"), "ion_channel_recording", ["name"], unique=False
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "external_url",
            "ion_channel",
            "ion_channel_model",
            "ion_channel_recording",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "reconstruction_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "electrical_cell_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "external_url",
            "ion_channel_model",
            "memodel",
            "mesh",
            "memodel_calibration_result",
            "me_type_density",
            "reconstruction_morphology",
            "simulation",
            "simulation_campaign",
            "simulation_campaign_generation",
            "simulation_execution",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.drop_index(op.f("ix_ion_channel_recording_name"), table_name="ion_channel_recording")
    op.drop_index(
        op.f("ix_ion_channel_recording_ion_channel_id"), table_name="ion_channel_recording"
    )
    op.drop_index(
        "ix_ion_channel_recording_description_vector",
        table_name="ion_channel_recording",
        postgresql_using="gin",
    )
    op.drop_table("ion_channel_recording")
    op.drop_index(op.f("ix_ion_channel_updated_by_id"), table_name="ion_channel")
    op.drop_index(op.f("ix_ion_channel_label"), table_name="ion_channel")
    op.drop_index(op.f("ix_ion_channel_name"), table_name="ion_channel")
    op.drop_index(
        "ix_ion_channel_description_vector", table_name="ion_channel", postgresql_using="gin"
    )
    op.drop_index(op.f("ix_ion_channel_creation_date"), table_name="ion_channel")
    op.drop_index(op.f("ix_ion_channel_created_by_id"), table_name="ion_channel")
    op.drop_table("ion_channel")
    # ### end Alembic commands ###
