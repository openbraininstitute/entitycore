"""add pgvector

Revision ID: 7aa80d34dbdd
Revises: 06af11530839
Create Date: 2025-09-15 10:59:07.825826

"""

from typing import Sequence, Union
import os
import random

import openai
from alembic import op
from alembic_utils.pg_extension import PGExtension
from pgvector.sqlalchemy import Vector
import sqlalchemy as sa
from sqlalchemy import text

# revision identifiers, used by Alembic.
revision: str = "7aa80d34dbdd"
down_revision: Union[str, None] = "06af11530839"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def generate_embeddings_for_existing_data():
    """Generate embeddings for existing brain_region, species, and strain data."""
    # Check environment and API key requirements
    environment = os.getenv("ENVIRONMENT", "").lower()
    api_key = os.getenv("OPENAI_API_KEY")

    # Fail if running in production/staging without API key
    if environment in ["production", "staging", "prod", "stage"] and not api_key:
        raise RuntimeError(
            f"Migration cannot run in {environment} environment without OPENAI_API_KEY. "
            "Please set the OPENAI_API_KEY environment variable or run in development mode."
        )

    # Get connection
    connection = op.get_bind()

    # Collect all entity data
    all_entities = []

    # Collect brain region data
    brain_regions = connection.execute(text("SELECT id, name FROM brain_region")).fetchall()
    for brain_region in brain_regions:
        all_entities.append(("brain_region", brain_region.id, brain_region.name))

    # Collect species data
    species = connection.execute(text("SELECT id, name FROM species")).fetchall()
    for sp in species:
        all_entities.append(("species", sp.id, sp.name))

    # Collect strain data
    strains = connection.execute(text("SELECT id, name FROM strain")).fetchall()
    for strain in strains:
        all_entities.append(("strain", strain.id, strain.name))

    # Generate embeddings based on available API key

    if api_key:
        # Use OpenAI API for real embeddings
        client = openai.OpenAI(api_key=api_key)

        # Generate all embeddings in a single API call
        names = [entity[2] for entity in all_entities]
        response = client.embeddings.create(model="text-embedding-3-small", input=names)

        # Extract embeddings from response
        embeddings = [embedding.embedding for embedding in response.data]
    else:
        # Use random vectors when OpenAI key is not provided
        embeddings = []
        for _ in all_entities:
            random_embedding = [random.random() for _ in range(1536)]
            embeddings.append(random_embedding)

    # Update database with generated embeddings (shared logic)
    for (table_name, entity_id, _), embedding in zip(all_entities, embeddings):
        # Convert embedding to string format for pgvector
        embedding_str = str(embedding)
        connection.execute(
            text(f"UPDATE {table_name} SET embedding = :embedding WHERE id = :id"),
            {"embedding": embedding_str, "id": entity_id},
        )


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Enable the pgvector extension
    public_vector = PGExtension(schema="public", signature="vector")
    op.create_entity(public_vector)

    op.add_column(
        "brain_region",
        sa.Column("embedding", Vector(dim=1536), nullable=True),
    )

    op.add_column(
        "species",
        sa.Column("embedding", Vector(dim=1536), nullable=True),
    )

    op.add_column(
        "strain",
        sa.Column("embedding", Vector(dim=1536), nullable=True),
    )

    # Generate embeddings for existing data
    generate_embeddings_for_existing_data()

    # Now make columns non-nullable
    op.alter_column("brain_region", "embedding", nullable=False)
    op.alter_column("species", "embedding", nullable=False)
    op.alter_column("strain", "embedding", nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("strain", "embedding")
    op.drop_column("species", "embedding")
    op.drop_column("brain_region", "embedding")

    # Disable the pgvector extension
    public_vector = PGExtension(schema="public", signature="vector")
    op.drop_entity(public_vector)
    # ### end Alembic commands ###
