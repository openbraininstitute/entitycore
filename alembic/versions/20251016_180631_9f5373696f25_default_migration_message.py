"""Default migration message

Revision ID: 9f5373696f25
Revises: 674bc10f9c93
Create Date: 2025-10-16 18:06:31.613508

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "9f5373696f25"
down_revision: Union[str, None] = "674bc10f9c93"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "created",
        "pending",
        "running",
        "done",
        "error",
        name="ion_channel_modeling_execution_status",
    ).create(op.get_bind())
    op.create_table(
        "ion_channel_modeling_campaign",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "scan_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_ion_channel_modeling_campaign_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel_modeling_campaign")),
    )
    op.create_index(
        "ix_ion_channel_modeling_campaign_description_vector",
        "ion_channel_modeling_campaign",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_ion_channel_modeling_campaign_name"),
        "ion_channel_modeling_campaign",
        ["name"],
        unique=False,
    )
    op.create_table(
        "ion_channel_modeling_config_generation",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["activity.id"],
            name=op.f("fk_ion_channel_modeling_config_generation_id_activity"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel_modeling_config_generation")),
    )
    op.create_table(
        "ion_channel_modeling_execution",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "created",
                "pending",
                "running",
                "done",
                "error",
                name="ion_channel_modeling_execution_status",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["activity.id"], name=op.f("fk_ion_channel_modeling_execution_id_activity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel_modeling_execution")),
    )
    op.create_table(
        "ion_channel_modeling_config",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("ion_channel_modeling_campaign_id", sa.Uuid(), nullable=False),
        sa.Column(
            "scan_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_ion_channel_modeling_config_id_entity")
        ),
        sa.ForeignKeyConstraint(
            ["ion_channel_modeling_campaign_id"],
            ["ion_channel_modeling_campaign.id"],
            name=op.f(
                "fk_ion_channel_modeling_config_ion_channel_modeling_campaign_id_ion_channel_modeling_campaign"
            ),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_ion_channel_modeling_config")),
    )
    op.create_index(
        "ix_ion_channel_modeling_config_description_vector",
        "ion_channel_modeling_config",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_ion_channel_modeling_config_ion_channel_modeling_campaign_id"),
        "ion_channel_modeling_config",
        ["ion_channel_modeling_campaign_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_ion_channel_modeling_config_name"),
        "ion_channel_modeling_config",
        ["name"],
        unique=False,
    )
    op.create_table(
        "ion_channel_recording__ion_channel_modeling_campaign",
        sa.Column("ion_channel_recording_id", sa.Uuid(), nullable=False),
        sa.Column("ion_channel_modeling_campaign_id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ion_channel_modeling_campaign_id"],
            ["ion_channel_modeling_campaign.id"],
            name=op.f(
                "fk_ion_channel_recording__ion_channel_modeling_campaign_ion_channel_modeling_campaign_id_ion_channel_modeling_campaign"
            ),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["ion_channel_recording_id"],
            ["ion_channel_recording.id"],
            name=op.f(
                "fk_ion_channel_recording__ion_channel_modeling_campaign_ion_channel_recording_id_ion_channel_recording"
            ),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "ion_channel_recording_id",
            "ion_channel_modeling_campaign_id",
            name=op.f("pk_ion_channel_recording__ion_channel_modeling_campaign"),
        ),
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="activitytype",
        new_values=[
            "simulation_execution",
            "simulation_generation",
            "validation",
            "calibration",
            "analysis_notebook_execution",
            "ion_channel_modeling_execution",
            "ion_channel_modeling_config_generation",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="activity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "cell_morphology",
            "cell_morphology_protocol",
            "electrical_cell_recording",
            "electrical_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "external_url",
            "ion_channel_model",
            "ion_channel_modeling_campaign",
            "ion_channel_modeling_config",
            "ion_channel_recording",
            "memodel",
            "memodel_calibration_result",
            "me_type_density",
            "simulation",
            "simulation_campaign",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
            "em_dense_reconstruction_dataset",
            "em_cell_mesh",
            "analysis_notebook_template",
            "analysis_notebook_environment",
            "analysis_notebook_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="assetlabel",
        new_values=[
            "morphology",
            "morphology_with_spines",
            "cell_composition_summary",
            "cell_composition_volumes",
            "single_neuron_synaptome_config",
            "single_neuron_synaptome_simulation_data",
            "single_neuron_simulation_data",
            "sonata_circuit",
            "compressed_sonata_circuit",
            "circuit_figures",
            "circuit_analysis_data",
            "circuit_connectivity_matrices",
            "nwb",
            "neuron_hoc",
            "emodel_optimization_output",
            "sonata_simulation_config",
            "simulation_generation_config",
            "ion_channel_modeling_generation_config",
            "custom_node_sets",
            "campaign_generation_config",
            "campaign_summary",
            "replay_spikes",
            "voltage_report",
            "spike_report",
            "neuron_mechanisms",
            "brain_atlas_annotation",
            "brain_atlas_region_mesh",
            "voxel_densities",
            "validation_result_figure",
            "validation_result_details",
            "simulation_designer_image",
            "circuit_visualization",
            "node_stats",
            "network_stats_a",
            "network_stats_b",
            "cell_surface_mesh",
            "jupyter_notebook",
            "requirements",
            "ion_channel_model_figure",
            "ion_channel_model_figure_summary_json",
            "ion_channel_model_thumbnail",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="asset", column_name="label")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="assetlabel",
        new_values=[
            "morphology",
            "morphology_with_spines",
            "cell_composition_summary",
            "cell_composition_volumes",
            "single_neuron_synaptome_config",
            "single_neuron_synaptome_simulation_data",
            "single_neuron_simulation_data",
            "sonata_circuit",
            "compressed_sonata_circuit",
            "circuit_figures",
            "circuit_analysis_data",
            "circuit_connectivity_matrices",
            "nwb",
            "neuron_hoc",
            "emodel_optimization_output",
            "sonata_simulation_config",
            "simulation_generation_config",
            "custom_node_sets",
            "campaign_generation_config",
            "campaign_summary",
            "replay_spikes",
            "voltage_report",
            "spike_report",
            "neuron_mechanisms",
            "brain_atlas_annotation",
            "brain_atlas_region_mesh",
            "voxel_densities",
            "validation_result_figure",
            "validation_result_details",
            "simulation_designer_image",
            "circuit_visualization",
            "node_stats",
            "network_stats_a",
            "network_stats_b",
            "cell_surface_mesh",
            "jupyter_notebook",
            "requirements",
            "ion_channel_model_figure",
            "ion_channel_model_figure_summary_json",
            "ion_channel_model_thumbnail",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="asset", column_name="label")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "cell_morphology",
            "cell_morphology_protocol",
            "electrical_cell_recording",
            "electrical_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "external_url",
            "ion_channel_model",
            "ion_channel_recording",
            "memodel",
            "memodel_calibration_result",
            "me_type_density",
            "simulation",
            "simulation_campaign",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
            "em_dense_reconstruction_dataset",
            "em_cell_mesh",
            "analysis_notebook_template",
            "analysis_notebook_environment",
            "analysis_notebook_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="activitytype",
        new_values=[
            "simulation_execution",
            "simulation_generation",
            "validation",
            "calibration",
            "analysis_notebook_execution",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="activity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.drop_table("ion_channel_recording__ion_channel_modeling_campaign")
    op.drop_index(
        op.f("ix_ion_channel_modeling_config_name"), table_name="ion_channel_modeling_config"
    )
    op.drop_index(
        op.f("ix_ion_channel_modeling_config_ion_channel_modeling_campaign_id"),
        table_name="ion_channel_modeling_config",
    )
    op.drop_index(
        "ix_ion_channel_modeling_config_description_vector",
        table_name="ion_channel_modeling_config",
        postgresql_using="gin",
    )
    op.drop_table("ion_channel_modeling_config")
    op.drop_table("ion_channel_modeling_execution")
    op.drop_table("ion_channel_modeling_config_generation")
    op.drop_index(
        op.f("ix_ion_channel_modeling_campaign_name"), table_name="ion_channel_modeling_campaign"
    )
    op.drop_index(
        "ix_ion_channel_modeling_campaign_description_vector",
        table_name="ion_channel_modeling_campaign",
        postgresql_using="gin",
    )
    op.drop_table("ion_channel_modeling_campaign")
    sa.Enum(
        "created",
        "pending",
        "running",
        "done",
        "error",
        name="ion_channel_modeling_execution_status",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
