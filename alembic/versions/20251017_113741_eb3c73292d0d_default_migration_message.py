"""Default migration message

Revision ID: eb3c73292d0d
Revises: 948df84334af
Create Date: 2025-10-17 11:37:41.320175

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "eb3c73292d0d"
down_revision: Union[str, None] = "948df84334af"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "created", "pending", "running", "done", "error", name="circuit_extraction_execution_status"
    ).create(op.get_bind())
    op.create_table(
        "circuit_extraction_campaign",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "scan_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_circuit_extraction_campaign_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_circuit_extraction_campaign")),
    )
    op.create_index(
        "ix_circuit_extraction_campaign_description_vector",
        "circuit_extraction_campaign",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_circuit_extraction_campaign_name"),
        "circuit_extraction_campaign",
        ["name"],
        unique=False,
    )
    op.create_table(
        "circuit_extraction_config_generation",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["activity.id"],
            name=op.f("fk_circuit_extraction_config_generation_id_activity"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_circuit_extraction_config_generation")),
    )
    op.create_table(
        "circuit_extraction_execution",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "created",
                "pending",
                "running",
                "done",
                "error",
                name="circuit_extraction_execution_status",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["activity.id"], name=op.f("fk_circuit_extraction_execution_id_activity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_circuit_extraction_execution")),
    )
    op.create_table(
        "circuit_extraction_config",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("circuit_id", sa.Uuid(), nullable=False),
        sa.Column(
            "scan_parameters",
            postgresql.JSONB(astext_type=sa.Text()),
            server_default="{}",
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("description_vector", postgresql.TSVECTOR(), nullable=True),
        sa.ForeignKeyConstraint(
            ["circuit_id"],
            ["circuit.id"],
            name=op.f("fk_circuit_extraction_config_circuit_id_circuit"),
        ),
        sa.ForeignKeyConstraint(
            ["id"], ["entity.id"], name=op.f("fk_circuit_extraction_config_id_entity")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_circuit_extraction_config")),
    )
    op.create_index(
        op.f("ix_circuit_extraction_config_circuit_id"),
        "circuit_extraction_config",
        ["circuit_id"],
        unique=False,
    )
    op.create_index(
        "ix_circuit_extraction_config_description_vector",
        "circuit_extraction_config",
        ["description_vector"],
        unique=False,
        postgresql_using="gin",
    )
    op.create_index(
        op.f("ix_circuit_extraction_config_name"),
        "circuit_extraction_config",
        ["name"],
        unique=False,
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="activitytype",
        new_values=[
            "simulation_execution",
            "simulation_generation",
            "validation",
            "calibration",
            "analysis_notebook_execution",
            "circuit_extraction_config_generation",
            "circuit_extraction_execution",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="activity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "cell_morphology",
            "cell_morphology_protocol",
            "electrical_cell_recording",
            "electrical_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "external_url",
            "ion_channel_model",
            "ion_channel_recording",
            "memodel",
            "memodel_calibration_result",
            "me_type_density",
            "simulation",
            "simulation_campaign",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
            "circuit_extraction_campaign",
            "circuit_extraction_config",
            "em_dense_reconstruction_dataset",
            "em_cell_mesh",
            "analysis_notebook_template",
            "analysis_notebook_environment",
            "analysis_notebook_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="entitytype",
        new_values=[
            "analysis_software_source_code",
            "brain_atlas",
            "brain_atlas_region",
            "cell_composition",
            "cell_morphology",
            "cell_morphology_protocol",
            "electrical_cell_recording",
            "electrical_recording",
            "electrical_recording_stimulus",
            "emodel",
            "experimental_bouton_density",
            "experimental_neuron_density",
            "experimental_synapses_per_connection",
            "external_url",
            "ion_channel_model",
            "ion_channel_recording",
            "memodel",
            "memodel_calibration_result",
            "me_type_density",
            "simulation",
            "simulation_campaign",
            "simulation_result",
            "scientific_artifact",
            "single_neuron_simulation",
            "single_neuron_synaptome",
            "single_neuron_synaptome_simulation",
            "subject",
            "validation_result",
            "circuit",
            "em_dense_reconstruction_dataset",
            "em_cell_mesh",
            "analysis_notebook_template",
            "analysis_notebook_environment",
            "analysis_notebook_result",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="entity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(
        enum_schema="public",
        enum_name="activitytype",
        new_values=[
            "simulation_execution",
            "simulation_generation",
            "validation",
            "calibration",
            "analysis_notebook_execution",
        ],
        affected_columns=[
            TableReference(table_schema="public", table_name="activity", column_name="type")
        ],
        enum_values_to_rename=[],
    )
    op.drop_index(op.f("ix_circuit_extraction_config_name"), table_name="circuit_extraction_config")
    op.drop_index(
        "ix_circuit_extraction_config_description_vector",
        table_name="circuit_extraction_config",
        postgresql_using="gin",
    )
    op.drop_index(
        op.f("ix_circuit_extraction_config_circuit_id"), table_name="circuit_extraction_config"
    )
    op.drop_table("circuit_extraction_config")
    op.drop_table("circuit_extraction_execution")
    op.drop_table("circuit_extraction_config_generation")
    op.drop_index(
        op.f("ix_circuit_extraction_campaign_name"), table_name="circuit_extraction_campaign"
    )
    op.drop_index(
        "ix_circuit_extraction_campaign_description_vector",
        table_name="circuit_extraction_campaign",
        postgresql_using="gin",
    )
    op.drop_table("circuit_extraction_campaign")
    sa.Enum(
        "created", "pending", "running", "done", "error", name="circuit_extraction_execution_status"
    ).drop(op.get_bind())
    # ### end Alembic commands ###
