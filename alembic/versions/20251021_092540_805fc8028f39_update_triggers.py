"""Update triggers

Revision ID: 805fc8028f39
Revises: 36bff9397f44
Create Date: 2025-10-21 09:25:40.484777

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

from sqlalchemy import Text
import app.db.types

# revision identifiers, used by Alembic.
revision: str = "805fc8028f39"
down_revision: Union[str, None] = "36bff9397f44"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_ion_channel_modeling_campaign_ion_channel_modeling_campaign_description_vector = PGTrigger(
        schema="public",
        signature="ion_channel_modeling_campaign_description_vector",
        on_entity="public.ion_channel_modeling_campaign",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_modeling_campaign\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_ion_channel_modeling_campaign_ion_channel_modeling_campaign_description_vector
    )

    public_ion_channel_modeling_config_ion_channel_modeling_config_description_vector = PGTrigger(
        schema="public",
        signature="ion_channel_modeling_config_description_vector",
        on_entity="public.ion_channel_modeling_config",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_modeling_config\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.create_entity(
        public_ion_channel_modeling_config_ion_channel_modeling_config_description_vector
    )

    public_auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007 = PGFunction(
        schema="public",
        signature="auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                \n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.ion_channel_modeling_campaign_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference\\: ion_channel_modeling_config.ion_channel_modeling_campaign_id'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.create_entity(public_auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007)

    public_ion_channel_modeling_config_auth_trg_ion_channel_modeling_config_ion_channel_m_aa2f6661 = PGTrigger(
        schema="public",
        signature="auth_trg_ion_channel_modeling_config_ion_channel_m_aa2f6661",
        on_entity="public.ion_channel_modeling_config",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_modeling_config\n            FOR EACH ROW EXECUTE FUNCTION auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007()",
    )
    op.create_entity(
        public_ion_channel_modeling_config_auth_trg_ion_channel_modeling_config_ion_channel_m_aa2f6661
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_ion_channel_modeling_config_auth_trg_ion_channel_modeling_config_ion_channel_m_aa2f6661 = PGTrigger(
        schema="public",
        signature="auth_trg_ion_channel_modeling_config_ion_channel_m_aa2f6661",
        on_entity="public.ion_channel_modeling_config",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_modeling_config\n            FOR EACH ROW EXECUTE FUNCTION auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007()",
    )
    op.drop_entity(
        public_ion_channel_modeling_config_auth_trg_ion_channel_modeling_config_ion_channel_m_aa2f6661
    )

    public_auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007 = PGFunction(
        schema="public",
        signature="auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007()",
        definition="RETURNS TRIGGER AS $$\n            BEGIN\n                \n                IF NOT EXISTS (\n                    SELECT 1 FROM entity e1\n                    JOIN entity e2 ON e2.id = NEW.id\n                    WHERE e1.id = NEW.ion_channel_modeling_campaign_id\n                    AND (e1.authorized_public = TRUE\n                        OR (e2.authorized_public = FALSE\n                            AND e1.authorized_project_id = e2.authorized_project_id\n                        )\n                    )\n                ) THEN\n                    RAISE EXCEPTION 'unauthorized private reference\\: ion_channel_modeling_config.ion_channel_modeling_campaign_id'\n                        USING ERRCODE = '42501'; -- Insufficient Privilege\n                END IF;\n                RETURN NEW;\n            END;\n            $$ LANGUAGE plpgsql",
    )
    op.drop_entity(public_auth_fnc_ion_channel_modeling_config_ion_channel_m_b2500007)

    public_ion_channel_modeling_config_ion_channel_modeling_config_description_vector = PGTrigger(
        schema="public",
        signature="ion_channel_modeling_config_description_vector",
        on_entity="public.ion_channel_modeling_config",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_modeling_config\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_ion_channel_modeling_config_ion_channel_modeling_config_description_vector
    )

    public_ion_channel_modeling_campaign_ion_channel_modeling_campaign_description_vector = PGTrigger(
        schema="public",
        signature="ion_channel_modeling_campaign_description_vector",
        on_entity="public.ion_channel_modeling_campaign",
        is_constraint=False,
        definition="BEFORE INSERT OR UPDATE ON ion_channel_modeling_campaign\n            FOR EACH ROW EXECUTE FUNCTION\n                tsvector_update_trigger(description_vector, 'pg_catalog.english', description, name)",
    )
    op.drop_entity(
        public_ion_channel_modeling_campaign_ion_channel_modeling_campaign_description_vector
    )

    # ### end Alembic commands ###
